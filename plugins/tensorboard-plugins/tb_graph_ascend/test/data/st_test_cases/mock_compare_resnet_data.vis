{
    "NPU": {
        "root": "DefaultModel",
        "dump_data_dir": null,
        "node": {
            "DefaultModel": {
                "id": "DefaultModel",
                "node_type": 0,
                "output_data": {},
                "input_data": {},
                "upnode": "None",
                "subnodes": [
                    "Module.conv1.Conv2d.forward.0",
                    "Module.bn1.BatchNorm2d.forward.0",
                    "Module.relu.ReLU.forward.0",
                    "Module.maxpool.MaxPool2d.forward.0",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer4.Sequential.forward.0",
                    "Module.avgpool.AdaptiveAvgPool2d.forward.0",
                    "Module.fc.Linear.forward.0",
                    "Module.fc.Linear.backward.0",
                    "Module.avgpool.AdaptiveAvgPool2d.backward.0",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer1.Sequential.backward.0",
                    "Module.maxpool.MaxPool2d.backward.0",
                    "Module.relu.ReLU.backward.0",
                    "Module.bn1.BatchNorm2d.backward.0",
                    "Module.conv1.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.conv1.Conv2d.forward.0": {
                "id": "Module.conv1.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.conv1.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "1.526799",
                        "Min": "-1.559762",
                        "Mean": "-0.000263",
                        "Norm": "244.860931",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.conv1.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 3, 64, 64]",
                        "Max": "4.350435",
                        "Min": "-4.339223",
                        "Mean": "-0.001572",
                        "Norm": "350.247772",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.conv1.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 268, in _forward_impl, \n x = self.conv1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {
                    "precision_index": 0
                }
            },
            "Module.bn1.BatchNorm2d.forward.0": {
                "id": "Module.bn1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.bn1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "4.673826",
                        "Min": "-5.146786",
                        "Mean": "4.656613e-11",
                        "Norm": "809.493835",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.bn1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "1.526799",
                        "Min": "-1.559762",
                        "Mean": "-0.000263",
                        "Norm": "244.860931",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.bn1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 269, in _forward_impl, \n x = self.bn1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {
                    "precision_index": 0
                }
            },
            "Module.relu.ReLU.forward.0": {
                "id": "Module.relu.ReLU.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.relu.ReLU.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "4.673826",
                        "Min": "0.0",
                        "Mean": "0.397851",
                        "Norm": "572.419128",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.relu.ReLU.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "4.673826",
                        "Min": "0.0",
                        "Mean": "0.397851",
                        "Norm": "572.419128",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.relu.ReLU.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 270, in _forward_impl, \n x = self.relu(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {
                    "precision_index": 0
                }
            },
            "Module.maxpool.MaxPool2d.forward.0": {
                "id": "Module.maxpool.MaxPool2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.maxpool.MaxPool2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.673826",
                        "Min": "0.0",
                        "Mean": "1.460092",
                        "Norm": "641.917297",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.maxpool.MaxPool2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "4.673826",
                        "Min": "0.0",
                        "Mean": "0.397851",
                        "Norm": "572.419128",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.maxpool.MaxPool2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 271, in _forward_impl, \n x = self.maxpool(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.0.BasicBlock.forward.0": {
                "id": "Module.layer1.0.BasicBlock.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.BasicBlock.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "7.29416",
                        "Min": "0.0",
                        "Mean": "1.517842",
                        "Norm": "753.920776",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.0.BasicBlock.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.673826",
                        "Min": "0.0",
                        "Mean": "1.460092",
                        "Norm": "641.917297",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.Sequential.forward.0",
                "subnodes": [
                    "Module.layer1.0.conv1.Conv2d.forward.0",
                    "Module.layer1.0.bn1.BatchNorm2d.forward.0",
                    "Module.layer1.0.relu.ReLU.forward.0",
                    "Module.layer1.0.conv2.Conv2d.forward.0",
                    "Module.layer1.0.bn2.BatchNorm2d.forward.0",
                    "Module.layer1.0.relu.ReLU.forward.1"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.0.BasicBlock.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.0.conv1.Conv2d.forward.0": {
                "id": "Module.layer1.0.conv1.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.conv1.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "7.74388",
                        "Min": "-7.379547",
                        "Mean": "-0.12333",
                        "Norm": "858.103699",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.0.conv1.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.673826",
                        "Min": "0.0",
                        "Mean": "1.460092",
                        "Norm": "641.917297",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.0.BasicBlock.forward.0",
                    "Module.layer1.0.conv1.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 92, in forward, \n out = self.conv1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.Sequential.forward.0": {
                "id": "Module.layer1.Sequential.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.Sequential.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "8.480864",
                        "Min": "0.0",
                        "Mean": "1.621092",
                        "Norm": "845.908813",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "1.241406",
                        "Min diff": "-0.352369",
                        "Mean diff": "3.252369",
                        "L2norm diff": "6.914416",
                        "MaxRelativeErr": "66.663253%",
                        "MinRelativeErr": "56.663237%",
                        "MeanRelativeErr": "52.663233%",
                        "NormRelativeErr": "53.663533%"
                    }
                },
                "input_data": {
                    "Module.layer1.Sequential.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.673826",
                        "Min": "0.0",
                        "Mean": "1.460092",
                        "Norm": "641.917297",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [
                    "Module.layer1.0.BasicBlock.forward.0",
                    "Module.layer1.1.BasicBlock.forward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {
                    "precision_index": 0.7
                }
            },
            "Module.layer1.0.bn1.BatchNorm2d.forward.0": {
                "id": "Module.layer1.0.bn1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.bn1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.247875",
                        "Min": "-4.199296",
                        "Mean": "1.620501e-08",
                        "Norm": "404.769043",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.0.bn1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "7.74388",
                        "Min": "-7.379547",
                        "Mean": "-0.12333",
                        "Norm": "858.103699",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.0.BasicBlock.forward.0",
                    "Module.layer1.0.bn1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 93, in forward, \n out = self.bn1(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.0.relu.ReLU.forward.0": {
                "id": "Module.layer1.0.relu.ReLU.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.relu.ReLU.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.247875",
                        "Min": "0.0",
                        "Mean": "0.39636",
                        "Norm": "286.644501",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.0.relu.ReLU.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.247875",
                        "Min": "0.0",
                        "Mean": "0.39636",
                        "Norm": "286.644501",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.0.BasicBlock.forward.0",
                    "Module.layer1.0.relu.ReLU.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 94, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.0.conv2.Conv2d.forward.0": {
                "id": "Module.layer1.0.conv2.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.conv2.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.442179",
                        "Min": "-3.972987",
                        "Mean": "0.084329",
                        "Norm": "370.438843",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.0.conv2.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.247875",
                        "Min": "0.0",
                        "Mean": "0.39636",
                        "Norm": "286.644501",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.0.BasicBlock.forward.0",
                    "Module.layer1.0.conv2.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 96, in forward, \n out = self.conv2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.0.bn2.BatchNorm2d.forward.0": {
                "id": "Module.layer1.0.bn2.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.bn2.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.605992",
                        "Min": "-4.646146",
                        "Mean": "4.284084e-09",
                        "Norm": "404.767944",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.0.bn2.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.442179",
                        "Min": "-3.972987",
                        "Mean": "0.084329",
                        "Norm": "370.438843",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.0.BasicBlock.forward.0",
                    "Module.layer1.0.bn2.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 97, in forward, \n out = self.bn2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.0.relu.ReLU.forward.1": {
                "id": "Module.layer1.0.relu.ReLU.forward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.relu.ReLU.forward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "7.29416",
                        "Min": "0.0",
                        "Mean": "1.517842",
                        "Norm": "753.920776",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.0.relu.ReLU.forward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "7.29416",
                        "Min": "0.0",
                        "Mean": "1.517842",
                        "Norm": "753.920776",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.0.BasicBlock.forward.0",
                    "Module.layer1.0.relu.ReLU.forward.1"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 103, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.1.BasicBlock.forward.0": {
                "id": "Module.layer1.1.BasicBlock.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.BasicBlock.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "8.480864",
                        "Min": "0.0",
                        "Mean": "1.621092",
                        "Norm": "845.908813",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "6.326555",
                        "Min diff": "5.36963",
                        "Mean diff": "5.12369",
                        "L2norm diff": "8.39633",
                        "MaxRelativeErr": "83.235636%",
                        "MinRelativeErr": "69.362945%",
                        "MeanRelativeErr": "72.369548%",
                        "NormRelativeErr": "71.369612%"
                    }
                },
                "input_data": {
                    "Module.layer1.1.BasicBlock.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "7.29416",
                        "Min": "0.0",
                        "Mean": "1.517842",
                        "Norm": "753.920776",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.Sequential.forward.0",
                "subnodes": [
                    "Module.layer1.1.conv1.Conv2d.forward.0",
                    "Module.layer1.1.bn1.BatchNorm2d.forward.0",
                    "Module.layer1.1.relu.ReLU.forward.0",
                    "Module.layer1.1.conv2.Conv2d.forward.0",
                    "Module.layer1.1.bn2.BatchNorm2d.forward.0",
                    "Module.layer1.1.relu.ReLU.forward.1"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.1.BasicBlock.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0.81
                }
            },
            "Module.layer1.1.conv1.Conv2d.forward.0": {
                "id": "Module.layer1.1.conv1.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.conv1.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "9.274334",
                        "Min": "-10.156013",
                        "Mean": "-0.101834",
                        "Norm": "975.393066",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.1.conv1.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "7.29416",
                        "Min": "0.0",
                        "Mean": "1.517842",
                        "Norm": "753.920776",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.1.BasicBlock.forward.0",
                    "Module.layer1.1.conv1.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 92, in forward, \n out = self.conv1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.1.bn1.BatchNorm2d.forward.0": {
                "id": "Module.layer1.1.bn1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.bn1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.2462",
                        "Min": "-4.49145",
                        "Mean": "-2.235174e-09",
                        "Norm": "404.770447",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.1.bn1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "9.274334",
                        "Min": "-10.156013",
                        "Mean": "-0.101834",
                        "Norm": "975.393066",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.1.BasicBlock.forward.0",
                    "Module.layer1.1.bn1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 93, in forward, \n out = self.bn1(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.1.relu.ReLU.forward.0": {
                "id": "Module.layer1.1.relu.ReLU.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.relu.ReLU.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.2462",
                        "Min": "0.0",
                        "Mean": "0.399545",
                        "Norm": "286.493317",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.1.relu.ReLU.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.2462",
                        "Min": "0.0",
                        "Mean": "0.399545",
                        "Norm": "286.493317",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.1.BasicBlock.forward.0",
                    "Module.layer1.1.relu.ReLU.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 94, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.1.conv2.Conv2d.forward.0": {
                "id": "Module.layer1.1.conv2.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.conv2.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.431858",
                        "Min": "-4.229196",
                        "Mean": "0.005514",
                        "Norm": "375.989105",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.1.conv2.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.2462",
                        "Min": "0.0",
                        "Mean": "0.399545",
                        "Norm": "286.493317",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.1.BasicBlock.forward.0",
                    "Module.layer1.1.conv2.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 96, in forward, \n out = self.conv2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.1.bn2.BatchNorm2d.forward.0": {
                "id": "Module.layer1.1.bn2.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.bn2.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.475619",
                        "Min": "-4.364196",
                        "Mean": "1.396984e-09",
                        "Norm": "404.76828",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.1.bn2.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.431858",
                        "Min": "-4.229196",
                        "Mean": "0.005514",
                        "Norm": "375.989105",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.1.BasicBlock.forward.0",
                    "Module.layer1.1.bn2.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 97, in forward, \n out = self.bn2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.1.relu.ReLU.forward.1": {
                "id": "Module.layer1.1.relu.ReLU.forward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.relu.ReLU.forward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "8.480864",
                        "Min": "0.0",
                        "Mean": "1.621092",
                        "Norm": "845.908813",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.1.relu.ReLU.forward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "8.480864",
                        "Min": "0.0",
                        "Mean": "1.621092",
                        "Norm": "845.908813",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.1.BasicBlock.forward.0",
                    "Module.layer1.1.relu.ReLU.forward.1"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 103, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0.81
                }
            },
            "Module.layer2.0.BasicBlock.forward.0": {
                "id": "Module.layer2.0.BasicBlock.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.BasicBlock.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "6.058126",
                        "Min": "0.0",
                        "Mean": "0.569005",
                        "Norm": "288.38382",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.BasicBlock.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "8.480864",
                        "Min": "0.0",
                        "Mean": "1.621092",
                        "Norm": "845.908813",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.Sequential.forward.0",
                "subnodes": [
                    "Module.layer2.0.conv1.Conv2d.forward.0",
                    "Module.layer2.0.bn1.BatchNorm2d.forward.0",
                    "Module.layer2.0.relu.ReLU.forward.0",
                    "Module.layer2.0.conv2.Conv2d.forward.0",
                    "Module.layer2.0.bn2.BatchNorm2d.forward.0",
                    "Module.layer2.0.downsample.Sequential.forward.0",
                    "Module.layer2.0.relu.ReLU.forward.1"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.0.conv1.Conv2d.forward.0": {
                "id": "Module.layer2.0.conv1.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.conv1.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "9.363841",
                        "Min": "-8.813498",
                        "Mean": "0.116351",
                        "Norm": "582.720398",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.conv1.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "8.480864",
                        "Min": "0.0",
                        "Mean": "1.621092",
                        "Norm": "845.908813",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.0.conv1.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 92, in forward, \n out = self.conv1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0.81
                }
            },
            "Module.layer2.Sequential.forward.0": {
                "id": "Module.layer2.Sequential.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.Sequential.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "7.306092",
                        "Min": "0.0",
                        "Mean": "0.830152",
                        "Norm": "372.837189",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.Sequential.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "8.480864",
                        "Min": "0.0",
                        "Mean": "1.621092",
                        "Norm": "845.908813",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.1.BasicBlock.forward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {
                    "precision_index": 0.81
                }
            },
            "Module.layer2.0.bn1.BatchNorm2d.forward.0": {
                "id": "Module.layer2.0.bn1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.bn1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.469386",
                        "Min": "-4.77158",
                        "Mean": "1.303852e-09",
                        "Norm": "286.215912",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.bn1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "9.363841",
                        "Min": "-8.813498",
                        "Mean": "0.116351",
                        "Norm": "582.720398",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.0.bn1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 93, in forward, \n out = self.bn1(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0.81
                }
            },
            "Module.layer2.0.relu.ReLU.forward.0": {
                "id": "Module.layer2.0.relu.ReLU.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.relu.ReLU.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.469386",
                        "Min": "0.0",
                        "Mean": "0.400609",
                        "Norm": "202.299973",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.relu.ReLU.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.469386",
                        "Min": "0.0",
                        "Mean": "0.400609",
                        "Norm": "202.299973",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.0.relu.ReLU.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 94, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0.81
                }
            },
            "Module.layer2.0.conv2.Conv2d.forward.0": {
                "id": "Module.layer2.0.conv2.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.conv2.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.0345",
                        "Min": "-4.125886",
                        "Mean": "-0.100337",
                        "Norm": "260.142944",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.conv2.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.469386",
                        "Min": "0.0",
                        "Mean": "0.400609",
                        "Norm": "202.299973",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.0.conv2.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 96, in forward, \n out = self.conv2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0.81
                }
            },
            "Module.layer2.0.bn2.BatchNorm2d.forward.0": {
                "id": "Module.layer2.0.bn2.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.bn2.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.152795",
                        "Min": "-4.936253",
                        "Mean": "3.725290e-10",
                        "Norm": "286.214294",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.bn2.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.0345",
                        "Min": "-4.125886",
                        "Mean": "-0.100337",
                        "Norm": "260.142944",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.0.bn2.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 97, in forward, \n out = self.bn2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0.81
                }
            },
            "Module.layer2.0.downsample.Sequential.forward.0": {
                "id": "Module.layer2.0.downsample.Sequential.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.downsample.Sequential.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.257706",
                        "Min": "-4.515994",
                        "Mean": "-1.117587e-09",
                        "Norm": "286.215851",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.downsample.Sequential.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "8.480864",
                        "Min": "0.0",
                        "Mean": "1.621092",
                        "Norm": "845.908813",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.forward.0",
                "subnodes": [
                    "Module.layer2.0.downsample.0.Conv2d.forward.0",
                    "Module.layer2.0.downsample.1.BatchNorm2d.forward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.0.downsample.Sequential.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 100, in forward, \n identity = self.downsample(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.0.downsample.0.Conv2d.forward.0": {
                "id": "Module.layer2.0.downsample.0.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.downsample.0.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "9.203266",
                        "Min": "-9.355068",
                        "Mean": "-0.02311",
                        "Norm": "617.127319",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.downsample.0.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "8.480864",
                        "Min": "0.0",
                        "Mean": "1.621092",
                        "Norm": "845.908813",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.0.downsample.Sequential.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.0.downsample.Sequential.forward.0",
                    "Module.layer2.0.downsample.0.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 100, in forward, \n identity = self.downsample(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.0.downsample.1.BatchNorm2d.forward.0": {
                "id": "Module.layer2.0.downsample.1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.downsample.1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.257706",
                        "Min": "-4.515994",
                        "Mean": "-1.117587e-09",
                        "Norm": "286.215851",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.downsample.1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "9.203266",
                        "Min": "-9.355068",
                        "Mean": "-0.02311",
                        "Norm": "617.127319",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.0.downsample.Sequential.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.0.downsample.Sequential.forward.0",
                    "Module.layer2.0.downsample.1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 100, in forward, \n identity = self.downsample(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.0.relu.ReLU.forward.1": {
                "id": "Module.layer2.0.relu.ReLU.forward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.relu.ReLU.forward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "6.058126",
                        "Min": "0.0",
                        "Mean": "0.569005",
                        "Norm": "288.38382",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.relu.ReLU.forward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "6.058126",
                        "Min": "0.0",
                        "Mean": "0.569005",
                        "Norm": "288.38382",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.0.relu.ReLU.forward.1"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 103, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.1.BasicBlock.forward.0": {
                "id": "Module.layer2.1.BasicBlock.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.BasicBlock.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "7.306092",
                        "Min": "0.0",
                        "Mean": "0.830152",
                        "Norm": "372.837189",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.1.BasicBlock.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "6.058126",
                        "Min": "0.0",
                        "Mean": "0.569005",
                        "Norm": "288.38382",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.Sequential.forward.0",
                "subnodes": [
                    "Module.layer2.1.conv1.Conv2d.forward.0",
                    "Module.layer2.1.bn1.BatchNorm2d.forward.0",
                    "Module.layer2.1.relu.ReLU.forward.0",
                    "Module.layer2.1.conv2.Conv2d.forward.0",
                    "Module.layer2.1.bn2.BatchNorm2d.forward.0",
                    "Module.layer2.1.relu.ReLU.forward.1"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.1.BasicBlock.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.1.conv1.Conv2d.forward.0": {
                "id": "Module.layer2.1.conv1.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.conv1.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "6.62359",
                        "Min": "-5.580112",
                        "Mean": "0.074416",
                        "Norm": "367.649841",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.1.conv1.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "6.058126",
                        "Min": "0.0",
                        "Mean": "0.569005",
                        "Norm": "288.38382",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.1.BasicBlock.forward.0",
                    "Module.layer2.1.conv1.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 92, in forward, \n out = self.conv1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.1.bn1.BatchNorm2d.forward.0": {
                "id": "Module.layer2.1.bn1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.bn1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.51583",
                        "Min": "-4.101557",
                        "Mean": "-3.818422e-09",
                        "Norm": "286.215485",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.1.bn1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "6.62359",
                        "Min": "-5.580112",
                        "Mean": "0.074416",
                        "Norm": "367.649841",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.1.BasicBlock.forward.0",
                    "Module.layer2.1.bn1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 93, in forward, \n out = self.bn1(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.1.relu.ReLU.forward.0": {
                "id": "Module.layer2.1.relu.ReLU.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.relu.ReLU.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.51583",
                        "Min": "0.0",
                        "Mean": "0.397453",
                        "Norm": "202.738693",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.1.relu.ReLU.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.51583",
                        "Min": "0.0",
                        "Mean": "0.397453",
                        "Norm": "202.738693",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.1.BasicBlock.forward.0",
                    "Module.layer2.1.relu.ReLU.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 94, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.1.conv2.Conv2d.forward.0": {
                "id": "Module.layer2.1.conv2.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.conv2.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.393562",
                        "Min": "-4.753343",
                        "Mean": "-0.078746",
                        "Norm": "260.969421",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.1.conv2.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.51583",
                        "Min": "0.0",
                        "Mean": "0.397453",
                        "Norm": "202.738693",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.1.BasicBlock.forward.0",
                    "Module.layer2.1.conv2.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 96, in forward, \n out = self.conv2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.1.bn2.BatchNorm2d.forward.0": {
                "id": "Module.layer2.1.bn2.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.bn2.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.73594",
                        "Min": "-4.475933",
                        "Mean": "2.421439e-09",
                        "Norm": "286.214294",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.1.bn2.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.393562",
                        "Min": "-4.753343",
                        "Mean": "-0.078746",
                        "Norm": "260.969421",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.1.BasicBlock.forward.0",
                    "Module.layer2.1.bn2.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 97, in forward, \n out = self.bn2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.1.relu.ReLU.forward.1": {
                "id": "Module.layer2.1.relu.ReLU.forward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.relu.ReLU.forward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "7.306092",
                        "Min": "0.0",
                        "Mean": "0.830152",
                        "Norm": "372.837189",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.1.relu.ReLU.forward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "7.306092",
                        "Min": "0.0",
                        "Mean": "0.830152",
                        "Norm": "372.837189",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.1.BasicBlock.forward.0",
                    "Module.layer2.1.relu.ReLU.forward.1"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 103, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.0.BasicBlock.forward.0": {
                "id": "Module.layer3.0.BasicBlock.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.BasicBlock.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "6.011552",
                        "Min": "0.0",
                        "Mean": "0.558552",
                        "Norm": "202.094818",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.BasicBlock.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "7.306092",
                        "Min": "0.0",
                        "Mean": "0.830152",
                        "Norm": "372.837189",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.Sequential.forward.0",
                "subnodes": [
                    "Module.layer3.0.conv1.Conv2d.forward.0",
                    "Module.layer3.0.bn1.BatchNorm2d.forward.0",
                    "Module.layer3.0.relu.ReLU.forward.0",
                    "Module.layer3.0.conv2.Conv2d.forward.0",
                    "Module.layer3.0.bn2.BatchNorm2d.forward.0",
                    "Module.layer3.0.downsample.Sequential.forward.0",
                    "Module.layer3.0.relu.ReLU.forward.1"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.0.conv1.Conv2d.forward.0": {
                "id": "Module.layer3.0.conv1.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.conv1.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "5.532973",
                        "Min": "-6.165116",
                        "Mean": "0.023511",
                        "Norm": "250.68428",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.conv1.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "7.306092",
                        "Min": "0.0",
                        "Mean": "0.830152",
                        "Norm": "372.837189",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.0.conv1.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 92, in forward, \n out = self.conv1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.Sequential.forward.0": {
                "id": "Module.layer3.Sequential.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.Sequential.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "7.355758",
                        "Min": "0.0",
                        "Mean": "0.81968",
                        "Norm": "262.51239",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.Sequential.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "7.306092",
                        "Min": "0.0",
                        "Mean": "0.830152",
                        "Norm": "372.837189",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.1.BasicBlock.forward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {
                    "precision_index": 0.81
                }
            },
            "Module.layer3.0.bn1.BatchNorm2d.forward.0": {
                "id": "Module.layer3.0.bn1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.bn1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.015517",
                        "Min": "-4.041963",
                        "Mean": "1.024455e-09",
                        "Norm": "202.384674",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.bn1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "5.532973",
                        "Min": "-6.165116",
                        "Mean": "0.023511",
                        "Norm": "250.68428",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.0.bn1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 93, in forward, \n out = self.bn1(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.0.relu.ReLU.forward.0": {
                "id": "Module.layer3.0.relu.ReLU.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.relu.ReLU.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.015517",
                        "Min": "0.0",
                        "Mean": "0.397493",
                        "Norm": "142.493881",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.relu.ReLU.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.015517",
                        "Min": "0.0",
                        "Mean": "0.397493",
                        "Norm": "142.493881",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.0.relu.ReLU.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 94, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.0.conv2.Conv2d.forward.0": {
                "id": "Module.layer3.0.conv2.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.conv2.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.085584",
                        "Min": "-3.535729",
                        "Mean": "0.009184",
                        "Norm": "171.884354",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.conv2.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.015517",
                        "Min": "0.0",
                        "Mean": "0.397493",
                        "Norm": "142.493881",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.0.conv2.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 96, in forward, \n out = self.conv2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.0.bn2.BatchNorm2d.forward.0": {
                "id": "Module.layer3.0.bn2.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.bn2.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.328585",
                        "Min": "-4.24462",
                        "Mean": "-5.587936e-10",
                        "Norm": "202.383789",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.bn2.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.085584",
                        "Min": "-3.535729",
                        "Mean": "0.009184",
                        "Norm": "171.884354",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.0.bn2.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 97, in forward, \n out = self.bn2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.0.downsample.Sequential.forward.0": {
                "id": "Module.layer3.0.downsample.Sequential.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.downsample.Sequential.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.673633",
                        "Min": "-4.118578",
                        "Mean": "2.980232e-09",
                        "Norm": "202.384674",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.downsample.Sequential.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "7.306092",
                        "Min": "0.0",
                        "Mean": "0.830152",
                        "Norm": "372.837189",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.forward.0",
                "subnodes": [
                    "Module.layer3.0.downsample.0.Conv2d.forward.0",
                    "Module.layer3.0.downsample.1.BatchNorm2d.forward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.0.downsample.Sequential.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 100, in forward, \n identity = self.downsample(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.0.downsample.0.Conv2d.forward.0": {
                "id": "Module.layer3.0.downsample.0.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.downsample.0.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "5.544863",
                        "Min": "-5.637341",
                        "Mean": "0.063504",
                        "Norm": "262.41275",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.downsample.0.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "7.306092",
                        "Min": "0.0",
                        "Mean": "0.830152",
                        "Norm": "372.837189",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.0.downsample.Sequential.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.0.downsample.Sequential.forward.0",
                    "Module.layer3.0.downsample.0.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 100, in forward, \n identity = self.downsample(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.0.downsample.1.BatchNorm2d.forward.0": {
                "id": "Module.layer3.0.downsample.1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.downsample.1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.673633",
                        "Min": "-4.118578",
                        "Mean": "2.980232e-09",
                        "Norm": "202.384674",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.downsample.1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "5.544863",
                        "Min": "-5.637341",
                        "Mean": "0.063504",
                        "Norm": "262.41275",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.0.downsample.Sequential.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.0.downsample.Sequential.forward.0",
                    "Module.layer3.0.downsample.1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 100, in forward, \n identity = self.downsample(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.0.relu.ReLU.forward.1": {
                "id": "Module.layer3.0.relu.ReLU.forward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.relu.ReLU.forward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "6.011552",
                        "Min": "0.0",
                        "Mean": "0.558552",
                        "Norm": "202.094818",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.relu.ReLU.forward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "6.011552",
                        "Min": "0.0",
                        "Mean": "0.558552",
                        "Norm": "202.094818",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.0.relu.ReLU.forward.1"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 103, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.1.BasicBlock.forward.0": {
                "id": "Module.layer3.1.BasicBlock.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.BasicBlock.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "7.355758",
                        "Min": "0.0",
                        "Mean": "0.81968",
                        "Norm": "262.51239",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.1.BasicBlock.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "6.011552",
                        "Min": "0.0",
                        "Mean": "0.558552",
                        "Norm": "202.094818",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.Sequential.forward.0",
                "subnodes": [
                    "Module.layer3.1.conv1.Conv2d.forward.0",
                    "Module.layer3.1.bn1.BatchNorm2d.forward.0",
                    "Module.layer3.1.relu.ReLU.forward.0",
                    "Module.layer3.1.conv2.Conv2d.forward.0",
                    "Module.layer3.1.bn2.BatchNorm2d.forward.0",
                    "Module.layer3.1.relu.ReLU.forward.1"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.1.BasicBlock.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.1.conv1.Conv2d.forward.0": {
                "id": "Module.layer3.1.conv1.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.conv1.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "6.445492",
                        "Min": "-5.73983",
                        "Mean": "0.056189",
                        "Norm": "242.794586",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.1.conv1.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "6.011552",
                        "Min": "0.0",
                        "Mean": "0.558552",
                        "Norm": "202.094818",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.1.BasicBlock.forward.0",
                    "Module.layer3.1.conv1.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 92, in forward, \n out = self.conv1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.1.bn1.BatchNorm2d.forward.0": {
                "id": "Module.layer3.1.bn1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.bn1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.64597",
                        "Min": "-4.302232",
                        "Mean": "6.053597e-10",
                        "Norm": "202.384811",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.1.bn1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "6.445492",
                        "Min": "-5.73983",
                        "Mean": "0.056189",
                        "Norm": "242.794586",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.1.BasicBlock.forward.0",
                    "Module.layer3.1.bn1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 93, in forward, \n out = self.bn1(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.1.relu.ReLU.forward.0": {
                "id": "Module.layer3.1.relu.ReLU.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.relu.ReLU.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.64597",
                        "Min": "0.0",
                        "Mean": "0.397107",
                        "Norm": "143.5979",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.1.relu.ReLU.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.64597",
                        "Min": "0.0",
                        "Mean": "0.397107",
                        "Norm": "143.5979",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.1.BasicBlock.forward.0",
                    "Module.layer3.1.relu.ReLU.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 94, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.1.conv2.Conv2d.forward.0": {
                "id": "Module.layer3.1.conv2.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.conv2.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "3.904869",
                        "Min": "-3.915274",
                        "Mean": "0.000739",
                        "Norm": "175.362854",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.1.conv2.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.64597",
                        "Min": "0.0",
                        "Mean": "0.397107",
                        "Norm": "143.5979",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.1.BasicBlock.forward.0",
                    "Module.layer3.1.conv2.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 96, in forward, \n out = self.conv2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.1.bn2.BatchNorm2d.forward.0": {
                "id": "Module.layer3.1.bn2.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.bn2.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.820035",
                        "Min": "-4.248729",
                        "Mean": "3.725290e-09",
                        "Norm": "202.38385",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.1.bn2.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "3.904869",
                        "Min": "-3.915274",
                        "Mean": "0.000739",
                        "Norm": "175.362854",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.1.BasicBlock.forward.0",
                    "Module.layer3.1.bn2.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 97, in forward, \n out = self.bn2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.1.relu.ReLU.forward.1": {
                "id": "Module.layer3.1.relu.ReLU.forward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.relu.ReLU.forward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "7.355758",
                        "Min": "0.0",
                        "Mean": "0.81968",
                        "Norm": "262.51239",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.1.relu.ReLU.forward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "7.355758",
                        "Min": "0.0",
                        "Mean": "0.81968",
                        "Norm": "262.51239",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.1.BasicBlock.forward.0",
                    "Module.layer3.1.relu.ReLU.forward.1"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 103, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.0.BasicBlock.forward.0": {
                "id": "Module.layer4.0.BasicBlock.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.BasicBlock.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.219019",
                        "Min": "0.0",
                        "Mean": "0.561198",
                        "Norm": "141.888809",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.BasicBlock.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "7.355758",
                        "Min": "0.0",
                        "Mean": "0.81968",
                        "Norm": "262.51239",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.Sequential.forward.0",
                "subnodes": [
                    "Module.layer4.0.conv1.Conv2d.forward.0",
                    "Module.layer4.0.bn1.BatchNorm2d.forward.0",
                    "Module.layer4.0.relu.ReLU.forward.0",
                    "Module.layer4.0.conv2.Conv2d.forward.0",
                    "Module.layer4.0.bn2.BatchNorm2d.forward.0",
                    "Module.layer4.0.downsample.Sequential.forward.0",
                    "Module.layer4.0.relu.ReLU.forward.1"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.0.conv1.Conv2d.forward.0": {
                "id": "Module.layer4.0.conv1.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.conv1.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.17719",
                        "Min": "-5.021754",
                        "Mean": "-0.003242",
                        "Norm": "160.062332",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.conv1.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "7.355758",
                        "Min": "0.0",
                        "Mean": "0.81968",
                        "Norm": "262.51239",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.0.conv1.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 92, in forward, \n out = self.conv1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.Sequential.forward.0": {
                "id": "Module.layer4.Sequential.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.Sequential.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.209611",
                        "Min": "0.0",
                        "Mean": "0.82681",
                        "Norm": "184.159729",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.Sequential.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "7.355758",
                        "Min": "0.0",
                        "Mean": "0.81968",
                        "Norm": "262.51239",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.1.BasicBlock.forward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {
                    "precision_index": 0.81
                }
            },
            "Module.layer4.0.bn1.BatchNorm2d.forward.0": {
                "id": "Module.layer4.0.bn1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.bn1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "4.531161",
                        "Min": "-4.494643",
                        "Mean": "0.0",
                        "Norm": "143.107346",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "N/A, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.bn1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.17719",
                        "Min": "-5.021754",
                        "Mean": "-0.003242",
                        "Norm": "160.062332",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.0.bn1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 93, in forward, \n out = self.bn1(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.0.relu.ReLU.forward.0": {
                "id": "Module.layer4.0.relu.ReLU.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.relu.ReLU.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "4.531161",
                        "Min": "0.0",
                        "Mean": "0.396782",
                        "Norm": "101.735374",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.relu.ReLU.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "4.531161",
                        "Min": "0.0",
                        "Mean": "0.396782",
                        "Norm": "101.735374",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.0.relu.ReLU.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 94, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.0.conv2.Conv2d.forward.0": {
                "id": "Module.layer4.0.conv2.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.conv2.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "2.548945",
                        "Min": "-2.623174",
                        "Mean": "-0.024468",
                        "Norm": "96.85141",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.conv2.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "4.531161",
                        "Min": "0.0",
                        "Mean": "0.396782",
                        "Norm": "101.735374",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.0.conv2.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 96, in forward, \n out = self.conv2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.0.bn2.BatchNorm2d.forward.0": {
                "id": "Module.layer4.0.bn2.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.bn2.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "3.43048",
                        "Min": "-3.390204",
                        "Mean": "-5.587936e-10",
                        "Norm": "143.106155",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.bn2.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "2.548945",
                        "Min": "-2.623174",
                        "Mean": "-0.024468",
                        "Norm": "96.85141",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.0.bn2.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 97, in forward, \n out = self.bn2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.0.downsample.Sequential.forward.0": {
                "id": "Module.layer4.0.downsample.Sequential.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.downsample.Sequential.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "4.162686",
                        "Min": "-4.141354",
                        "Mean": "-1.396984e-09",
                        "Norm": "143.107498",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.downsample.Sequential.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "7.355758",
                        "Min": "0.0",
                        "Mean": "0.81968",
                        "Norm": "262.51239",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.forward.0",
                "subnodes": [
                    "Module.layer4.0.downsample.0.Conv2d.forward.0",
                    "Module.layer4.0.downsample.1.BatchNorm2d.forward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.0.downsample.Sequential.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 100, in forward, \n identity = self.downsample(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.0.downsample.0.Conv2d.forward.0": {
                "id": "Module.layer4.0.downsample.0.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.downsample.0.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "5.574177",
                        "Min": "-5.778933",
                        "Mean": "0.001088",
                        "Norm": "182.966492",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.downsample.0.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "7.355758",
                        "Min": "0.0",
                        "Mean": "0.81968",
                        "Norm": "262.51239",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.0.downsample.Sequential.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.0.downsample.Sequential.forward.0",
                    "Module.layer4.0.downsample.0.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 100, in forward, \n identity = self.downsample(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.0.downsample.1.BatchNorm2d.forward.0": {
                "id": "Module.layer4.0.downsample.1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.downsample.1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "4.162686",
                        "Min": "-4.141354",
                        "Mean": "-1.396984e-09",
                        "Norm": "143.107498",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.downsample.1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "5.574177",
                        "Min": "-5.778933",
                        "Mean": "0.001088",
                        "Norm": "182.966492",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.0.downsample.Sequential.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.0.downsample.Sequential.forward.0",
                    "Module.layer4.0.downsample.1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 100, in forward, \n identity = self.downsample(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.0.relu.ReLU.forward.1": {
                "id": "Module.layer4.0.relu.ReLU.forward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.relu.ReLU.forward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.219019",
                        "Min": "0.0",
                        "Mean": "0.561198",
                        "Norm": "141.888809",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.relu.ReLU.forward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.219019",
                        "Min": "0.0",
                        "Mean": "0.561198",
                        "Norm": "141.888809",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.0.relu.ReLU.forward.1"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 103, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.1.BasicBlock.forward.0": {
                "id": "Module.layer4.1.BasicBlock.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.BasicBlock.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.209611",
                        "Min": "0.0",
                        "Mean": "0.82681",
                        "Norm": "184.159729",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.1.BasicBlock.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.219019",
                        "Min": "0.0",
                        "Mean": "0.561198",
                        "Norm": "141.888809",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.Sequential.forward.0",
                "subnodes": [
                    "Module.layer4.1.conv1.Conv2d.forward.0",
                    "Module.layer4.1.bn1.BatchNorm2d.forward.0",
                    "Module.layer4.1.relu.ReLU.forward.0",
                    "Module.layer4.1.conv2.Conv2d.forward.0",
                    "Module.layer4.1.bn2.BatchNorm2d.forward.0",
                    "Module.layer4.1.relu.ReLU.forward.1"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.1.BasicBlock.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.1.conv1.Conv2d.forward.0": {
                "id": "Module.layer4.1.conv1.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.conv1.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "3.864757",
                        "Min": "-3.787591",
                        "Mean": "0.002277",
                        "Norm": "133.55986",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.1.conv1.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.219019",
                        "Min": "0.0",
                        "Mean": "0.561198",
                        "Norm": "141.888809",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.1.BasicBlock.forward.0",
                    "Module.layer4.1.conv1.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 92, in forward, \n out = self.conv1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.1.bn1.BatchNorm2d.forward.0": {
                "id": "Module.layer4.1.bn1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.bn1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "3.722916",
                        "Min": "-3.694792",
                        "Mean": "1.490116e-09",
                        "Norm": "143.107239",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.1.bn1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "3.864757",
                        "Min": "-3.787591",
                        "Mean": "0.002277",
                        "Norm": "133.55986",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.1.BasicBlock.forward.0",
                    "Module.layer4.1.bn1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 93, in forward, \n out = self.bn1(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.1.relu.ReLU.forward.0": {
                "id": "Module.layer4.1.relu.ReLU.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.relu.ReLU.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "3.722916",
                        "Min": "0.0",
                        "Mean": "0.402127",
                        "Norm": "101.228134",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.1.relu.ReLU.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "3.722916",
                        "Min": "0.0",
                        "Mean": "0.402127",
                        "Norm": "101.228134",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.1.BasicBlock.forward.0",
                    "Module.layer4.1.relu.ReLU.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 94, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.1.conv2.Conv2d.forward.0": {
                "id": "Module.layer4.1.conv2.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.conv2.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "2.484763",
                        "Min": "-2.720093",
                        "Mean": "0.013722",
                        "Norm": "95.469269",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.1.conv2.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "3.722916",
                        "Min": "0.0",
                        "Mean": "0.402127",
                        "Norm": "101.228134",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.1.BasicBlock.forward.0",
                    "Module.layer4.1.conv2.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 96, in forward, \n out = self.conv2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.1.bn2.BatchNorm2d.forward.0": {
                "id": "Module.layer4.1.bn2.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.bn2.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "3.644991",
                        "Min": "-3.459976",
                        "Mean": "-4.656613e-10",
                        "Norm": "143.106094",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.1.bn2.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "2.484763",
                        "Min": "-2.720093",
                        "Mean": "0.013722",
                        "Norm": "95.469269",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.1.BasicBlock.forward.0",
                    "Module.layer4.1.bn2.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 97, in forward, \n out = self.bn2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.1.relu.ReLU.forward.1": {
                "id": "Module.layer4.1.relu.ReLU.forward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.relu.ReLU.forward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.209611",
                        "Min": "0.0",
                        "Mean": "0.82681",
                        "Norm": "184.159729",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.1.relu.ReLU.forward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.209611",
                        "Min": "0.0",
                        "Mean": "0.82681",
                        "Norm": "184.159729",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.1.BasicBlock.forward.0",
                    "Module.layer4.1.relu.ReLU.forward.1"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 103, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.avgpool.AdaptiveAvgPool2d.forward.0": {
                "id": "Module.avgpool.AdaptiveAvgPool2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.avgpool.AdaptiveAvgPool2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 1, 1]",
                        "Max": "2.68325",
                        "Min": "0.0",
                        "Mean": "0.82681",
                        "Norm": "66.964317",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.avgpool.AdaptiveAvgPool2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.209611",
                        "Min": "0.0",
                        "Mean": "0.82681",
                        "Norm": "184.159729",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "N/A, 由于Min小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.avgpool.AdaptiveAvgPool2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 278, in _forward_impl, \n x = self.avgpool(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {
                    "precision_index": 0.81
                }
            },
            "Module.fc.Linear.forward.0": {
                "id": "Module.fc.Linear.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.fc.Linear.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 10]",
                        "Max": "1.236255",
                        "Min": "-1.562365",
                        "Mean": "-0.12689",
                        "Norm": "5.357258",
                        "data_name": "-1"
                    }
                },
                "input_data": {
                    "Module.fc.Linear.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512]",
                        "Max": "2.68325",
                        "Min": "0.0",
                        "Mean": "0.82681",
                        "Norm": "66.964317",
                        "data_name": "-1"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 280, in _forward_impl, \n x = self.fc(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.fc.Linear.backward.0": {
                "id": "Module.fc.Linear.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.fc.Linear.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512]",
                        "Max": "0.006356",
                        "Min": "-0.00662",
                        "Mean": "0.000117",
                        "Norm": "0.176545",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.fc.Linear.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 10]",
                        "Max": "0.03222",
                        "Min": "-0.097696",
                        "Mean": "1.490116e-10",
                        "Norm": "0.311353",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.avgpool.AdaptiveAvgPool2d.backward.0": {
                "id": "Module.avgpool.AdaptiveAvgPool2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.avgpool.AdaptiveAvgPool2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.001589",
                        "Min": "-0.001655",
                        "Mean": "2.922326e-05",
                        "Norm": "0.088272",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.avgpool.AdaptiveAvgPool2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 1, 1]",
                        "Max": "0.006356",
                        "Min": "-0.00662",
                        "Mean": "0.000117",
                        "Norm": "0.176545",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.avgpool.AdaptiveAvgPool2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {
                    "precision_index": 0.81
                }
            },
            "Module.layer4.1.BasicBlock.backward.0": {
                "id": "Module.layer4.1.BasicBlock.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.BasicBlock.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003044",
                        "Min": "-0.003159",
                        "Mean": "2.016556e-05",
                        "Norm": "0.112632",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.1.BasicBlock.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.001589",
                        "Min": "-0.001655",
                        "Mean": "2.922326e-05",
                        "Norm": "0.088272",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.Sequential.backward.0",
                "subnodes": [
                    "Module.layer4.1.relu.ReLU.backward.0",
                    "Module.layer4.1.bn2.BatchNorm2d.backward.0",
                    "Module.layer4.1.conv2.Conv2d.backward.0",
                    "Module.layer4.1.relu.ReLU.backward.1",
                    "Module.layer4.1.bn1.BatchNorm2d.backward.0",
                    "Module.layer4.1.conv1.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.1.BasicBlock.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.1.relu.ReLU.backward.0": {
                "id": "Module.layer4.1.relu.ReLU.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.relu.ReLU.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.001589",
                        "Min": "-0.001655",
                        "Mean": "2.170244e-05",
                        "Norm": "0.071178",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.1.relu.ReLU.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.001589",
                        "Min": "-0.001655",
                        "Mean": "2.922326e-05",
                        "Norm": "0.088272",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.1.BasicBlock.backward.0",
                    "Module.layer4.1.relu.ReLU.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.Sequential.backward.0": {
                "id": "Module.layer4.Sequential.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.Sequential.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004012",
                        "Min": "-0.003481",
                        "Mean": "1.283064e-07",
                        "Norm": "0.12491",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.Sequential.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.001589",
                        "Min": "-0.001655",
                        "Mean": "2.922326e-05",
                        "Norm": "0.088272",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [
                    "Module.layer4.1.BasicBlock.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.1.bn2.BatchNorm2d.backward.0": {
                "id": "Module.layer4.1.bn2.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.bn2.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.00349",
                        "Min": "-0.003203",
                        "Mean": "-1.818989e-13",
                        "Norm": "0.114767",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.1.bn2.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.001589",
                        "Min": "-0.001655",
                        "Mean": "2.170244e-05",
                        "Norm": "0.071178",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.1.BasicBlock.backward.0",
                    "Module.layer4.1.bn2.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.1.conv2.Conv2d.backward.0": {
                "id": "Module.layer4.1.conv2.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.conv2.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003047",
                        "Min": "-0.003687",
                        "Mean": "5.127279e-08",
                        "Norm": "0.107756",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.1.conv2.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.00349",
                        "Min": "-0.003203",
                        "Mean": "-1.818989e-13",
                        "Norm": "0.114767",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.1.BasicBlock.backward.0",
                    "Module.layer4.1.conv2.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.1.relu.ReLU.backward.1": {
                "id": "Module.layer4.1.relu.ReLU.backward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.relu.ReLU.backward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003023",
                        "Min": "-0.002646",
                        "Mean": "9.799842e-08",
                        "Norm": "0.075418",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.1.relu.ReLU.backward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003047",
                        "Min": "-0.003687",
                        "Mean": "5.127279e-08",
                        "Norm": "0.107756",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.1.BasicBlock.backward.0",
                    "Module.layer4.1.relu.ReLU.backward.1"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.1.bn1.BatchNorm2d.backward.0": {
                "id": "Module.layer4.1.bn1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.bn1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.00392",
                        "Min": "-0.00384",
                        "Mean": "2.160050e-13",
                        "Norm": "0.093361",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.1.bn1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003023",
                        "Min": "-0.002646",
                        "Mean": "9.799842e-08",
                        "Norm": "0.075418",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.1.BasicBlock.backward.0",
                    "Module.layer4.1.bn1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.1.conv1.Conv2d.backward.0": {
                "id": "Module.layer4.1.conv1.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.conv1.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.002777",
                        "Min": "-0.002687",
                        "Mean": "-1.536876e-06",
                        "Norm": "0.087284",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.1.conv1.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.00392",
                        "Min": "-0.00384",
                        "Mean": "2.160050e-13",
                        "Norm": "0.093361",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.1.BasicBlock.backward.0",
                    "Module.layer4.1.conv1.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.0.BasicBlock.backward.0": {
                "id": "Module.layer4.0.BasicBlock.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.BasicBlock.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004012",
                        "Min": "-0.003481",
                        "Mean": "1.283064e-07",
                        "Norm": "0.12491",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.BasicBlock.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003044",
                        "Min": "-0.003159",
                        "Mean": "2.016556e-05",
                        "Norm": "0.112632",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.Sequential.backward.0",
                "subnodes": [
                    "Module.layer4.0.relu.ReLU.backward.0",
                    "Module.layer4.0.downsample.Sequential.backward.0",
                    "Module.layer4.0.bn2.BatchNorm2d.backward.0",
                    "Module.layer4.0.conv2.Conv2d.backward.0",
                    "Module.layer4.0.relu.ReLU.backward.1",
                    "Module.layer4.0.bn1.BatchNorm2d.backward.0",
                    "Module.layer4.0.conv1.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.0.relu.ReLU.backward.0": {
                "id": "Module.layer4.0.relu.ReLU.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.relu.ReLU.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003044",
                        "Min": "-0.003159",
                        "Mean": "1.279740e-05",
                        "Norm": "0.082885",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.relu.ReLU.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003044",
                        "Min": "-0.003159",
                        "Mean": "2.016556e-05",
                        "Norm": "0.112632",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0",
                    "Module.layer4.0.relu.ReLU.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.0.downsample.Sequential.backward.0": {
                "id": "Module.layer4.0.downsample.Sequential.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.downsample.Sequential.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004114",
                        "Min": "-0.003346",
                        "Mean": "-4.547474e-14",
                        "Norm": "0.087317",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.downsample.Sequential.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003044",
                        "Min": "-0.003159",
                        "Mean": "1.279740e-05",
                        "Norm": "0.082885",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.backward.0",
                "subnodes": [
                    "Module.layer4.0.downsample.1.BatchNorm2d.backward.0",
                    "Module.layer4.0.downsample.0.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0",
                    "Module.layer4.0.downsample.Sequential.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.0.downsample.1.BatchNorm2d.backward.0": {
                "id": "Module.layer4.0.downsample.1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.downsample.1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.004101",
                        "Min": "-0.003454",
                        "Mean": "-3.637979e-13",
                        "Norm": "0.087384",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.downsample.1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003044",
                        "Min": "-0.003159",
                        "Mean": "1.279740e-05",
                        "Norm": "0.082885",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.0.downsample.Sequential.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0",
                    "Module.layer4.0.downsample.Sequential.backward.0",
                    "Module.layer4.0.downsample.1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.0.downsample.0.Conv2d.backward.0": {
                "id": "Module.layer4.0.downsample.0.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.downsample.0.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004114",
                        "Min": "-0.003346",
                        "Mean": "-4.547474e-14",
                        "Norm": "0.087317",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.downsample.0.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.004101",
                        "Min": "-0.003454",
                        "Mean": "-3.637979e-13",
                        "Norm": "0.087384",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.0.downsample.Sequential.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0",
                    "Module.layer4.0.downsample.Sequential.backward.0",
                    "Module.layer4.0.downsample.0.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.0.bn2.BatchNorm2d.backward.0": {
                "id": "Module.layer4.0.bn2.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.bn2.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.006026",
                        "Min": "-0.006504",
                        "Mean": "7.275958e-13",
                        "Norm": "0.138286",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.bn2.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003044",
                        "Min": "-0.003159",
                        "Mean": "1.279740e-05",
                        "Norm": "0.082885",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0",
                    "Module.layer4.0.bn2.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.0.conv2.Conv2d.backward.0": {
                "id": "Module.layer4.0.conv2.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.conv2.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.00354",
                        "Min": "-0.003561",
                        "Mean": "2.937198e-06",
                        "Norm": "0.130315",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.conv2.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.006026",
                        "Min": "-0.006504",
                        "Mean": "7.275958e-13",
                        "Norm": "0.138286",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0",
                    "Module.layer4.0.conv2.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.0.relu.ReLU.backward.1": {
                "id": "Module.layer4.0.relu.ReLU.backward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.relu.ReLU.backward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.00354",
                        "Min": "-0.003561",
                        "Mean": "-8.934543e-07",
                        "Norm": "0.092057",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.relu.ReLU.backward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.00354",
                        "Min": "-0.003561",
                        "Mean": "2.937198e-06",
                        "Norm": "0.130315",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0",
                    "Module.layer4.0.relu.ReLU.backward.1"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.0.bn1.BatchNorm2d.backward.0": {
                "id": "Module.layer4.0.bn1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.bn1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.004244",
                        "Min": "-0.004086",
                        "Mean": "-4.547474e-13",
                        "Norm": "0.106542",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.bn1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.00354",
                        "Min": "-0.003561",
                        "Mean": "-8.934543e-07",
                        "Norm": "0.092057",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0",
                    "Module.layer4.0.bn1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer4.0.conv1.Conv2d.backward.0": {
                "id": "Module.layer4.0.conv1.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.conv1.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.002732",
                        "Min": "-0.002337",
                        "Mean": "1.283062e-07",
                        "Norm": "0.088477",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer4.0.conv1.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.004244",
                        "Min": "-0.004086",
                        "Mean": "-4.547474e-13",
                        "Norm": "0.106542",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0",
                    "Module.layer4.0.conv1.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.1.BasicBlock.backward.0": {
                "id": "Module.layer3.1.BasicBlock.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.BasicBlock.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004265",
                        "Min": "-0.004394",
                        "Mean": "2.575660e-07",
                        "Norm": "0.166487",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.1.BasicBlock.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004012",
                        "Min": "-0.003481",
                        "Mean": "1.283064e-07",
                        "Norm": "0.12491",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.Sequential.backward.0",
                "subnodes": [
                    "Module.layer3.1.relu.ReLU.backward.0",
                    "Module.layer3.1.bn2.BatchNorm2d.backward.0",
                    "Module.layer3.1.conv2.Conv2d.backward.0",
                    "Module.layer3.1.relu.ReLU.backward.1",
                    "Module.layer3.1.bn1.BatchNorm2d.backward.0",
                    "Module.layer3.1.conv1.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.1.BasicBlock.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.1.relu.ReLU.backward.0": {
                "id": "Module.layer3.1.relu.ReLU.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.relu.ReLU.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004012",
                        "Min": "-0.003481",
                        "Mean": "5.267739e-07",
                        "Norm": "0.100327",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.1.relu.ReLU.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004012",
                        "Min": "-0.003481",
                        "Mean": "1.283064e-07",
                        "Norm": "0.12491",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.1.BasicBlock.backward.0",
                    "Module.layer3.1.relu.ReLU.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.Sequential.backward.0": {
                "id": "Module.layer3.Sequential.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.Sequential.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004368",
                        "Min": "-0.004748",
                        "Mean": "1.208646e-08",
                        "Norm": "0.188543",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.Sequential.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004012",
                        "Min": "-0.003481",
                        "Mean": "1.283064e-07",
                        "Norm": "0.12491",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [
                    "Module.layer3.1.BasicBlock.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.1.bn2.BatchNorm2d.backward.0": {
                "id": "Module.layer3.1.bn2.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.bn2.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.005349",
                        "Min": "-0.00458",
                        "Mean": "5.456968e-13",
                        "Norm": "0.134192",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.1.bn2.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004012",
                        "Min": "-0.003481",
                        "Mean": "5.267739e-07",
                        "Norm": "0.100327",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.1.BasicBlock.backward.0",
                    "Module.layer3.1.bn2.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.1.conv2.Conv2d.backward.0": {
                "id": "Module.layer3.1.conv2.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.conv2.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004227",
                        "Min": "-0.003777",
                        "Mean": "-1.105049e-06",
                        "Norm": "0.161834",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.1.conv2.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.005349",
                        "Min": "-0.00458",
                        "Mean": "5.456968e-13",
                        "Norm": "0.134192",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.1.BasicBlock.backward.0",
                    "Module.layer3.1.conv2.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.1.relu.ReLU.backward.1": {
                "id": "Module.layer3.1.relu.ReLU.backward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.relu.ReLU.backward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.003753",
                        "Min": "-0.003777",
                        "Mean": "-1.121872e-07",
                        "Norm": "0.113553",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.1.relu.ReLU.backward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004227",
                        "Min": "-0.003777",
                        "Mean": "-1.105049e-06",
                        "Norm": "0.161834",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.1.BasicBlock.backward.0",
                    "Module.layer3.1.relu.ReLU.backward.1"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.1.bn1.BatchNorm2d.backward.0": {
                "id": "Module.layer3.1.bn1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.bn1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004302",
                        "Min": "-0.003597",
                        "Mean": "4.547474e-14",
                        "Norm": "0.108404",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.1.bn1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.003753",
                        "Min": "-0.003777",
                        "Mean": "-1.121872e-07",
                        "Norm": "0.113553",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.1.BasicBlock.backward.0",
                    "Module.layer3.1.bn1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.1.conv1.Conv2d.backward.0": {
                "id": "Module.layer3.1.conv1.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.conv1.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.003036",
                        "Min": "-0.002772",
                        "Mean": "-2.692081e-07",
                        "Norm": "0.133319",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.1.conv1.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004302",
                        "Min": "-0.003597",
                        "Mean": "4.547474e-14",
                        "Norm": "0.108404",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.1.BasicBlock.backward.0",
                    "Module.layer3.1.conv1.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.0.BasicBlock.backward.0": {
                "id": "Module.layer3.0.BasicBlock.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.BasicBlock.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004368",
                        "Min": "-0.004748",
                        "Mean": "1.208646e-08",
                        "Norm": "0.188543",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.BasicBlock.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004265",
                        "Min": "-0.004394",
                        "Mean": "2.575660e-07",
                        "Norm": "0.166487",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.Sequential.backward.0",
                "subnodes": [
                    "Module.layer3.0.relu.ReLU.backward.0",
                    "Module.layer3.0.downsample.Sequential.backward.0",
                    "Module.layer3.0.bn2.BatchNorm2d.backward.0",
                    "Module.layer3.0.conv2.Conv2d.backward.0",
                    "Module.layer3.0.relu.ReLU.backward.1",
                    "Module.layer3.0.bn1.BatchNorm2d.backward.0",
                    "Module.layer3.0.conv1.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.0.relu.ReLU.backward.0": {
                "id": "Module.layer3.0.relu.ReLU.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.relu.ReLU.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004265",
                        "Min": "-0.004394",
                        "Mean": "4.540960e-07",
                        "Norm": "0.122012",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.relu.ReLU.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004265",
                        "Min": "-0.004394",
                        "Mean": "2.575660e-07",
                        "Norm": "0.166487",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0",
                    "Module.layer3.0.relu.ReLU.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.0.downsample.Sequential.backward.0": {
                "id": "Module.layer3.0.downsample.Sequential.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.downsample.Sequential.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004002",
                        "Min": "-0.004525",
                        "Mean": "3.410605e-13",
                        "Norm": "0.1262",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.downsample.Sequential.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004265",
                        "Min": "-0.004394",
                        "Mean": "4.540960e-07",
                        "Norm": "0.122012",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.backward.0",
                "subnodes": [
                    "Module.layer3.0.downsample.1.BatchNorm2d.backward.0",
                    "Module.layer3.0.downsample.0.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0",
                    "Module.layer3.0.downsample.Sequential.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.0.downsample.1.BatchNorm2d.backward.0": {
                "id": "Module.layer3.0.downsample.1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.downsample.1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004036",
                        "Min": "-0.005194",
                        "Mean": "0.0",
                        "Norm": "0.126903",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "N/A, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.downsample.1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004265",
                        "Min": "-0.004394",
                        "Mean": "4.540960e-07",
                        "Norm": "0.122012",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.0.downsample.Sequential.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0",
                    "Module.layer3.0.downsample.Sequential.backward.0",
                    "Module.layer3.0.downsample.1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.0.downsample.0.Conv2d.backward.0": {
                "id": "Module.layer3.0.downsample.0.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.downsample.0.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004002",
                        "Min": "-0.004525",
                        "Mean": "3.410605e-13",
                        "Norm": "0.1262",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.downsample.0.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004036",
                        "Min": "-0.005194",
                        "Mean": "0.0",
                        "Norm": "0.126903",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "N/A, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.0.downsample.Sequential.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0",
                    "Module.layer3.0.downsample.Sequential.backward.0",
                    "Module.layer3.0.downsample.0.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.0.bn2.BatchNorm2d.backward.0": {
                "id": "Module.layer3.0.bn2.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.bn2.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.006225",
                        "Min": "-0.005798",
                        "Mean": "-3.637979e-13",
                        "Norm": "0.166553",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.bn2.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004265",
                        "Min": "-0.004394",
                        "Mean": "4.540960e-07",
                        "Norm": "0.122012",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0",
                    "Module.layer3.0.bn2.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.0.conv2.Conv2d.backward.0": {
                "id": "Module.layer3.0.conv2.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.conv2.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.005283",
                        "Min": "-0.005217",
                        "Mean": "-6.200127e-07",
                        "Norm": "0.20419",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.conv2.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.006225",
                        "Min": "-0.005798",
                        "Mean": "-3.637979e-13",
                        "Norm": "0.166553",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0",
                    "Module.layer3.0.conv2.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.0.relu.ReLU.backward.1": {
                "id": "Module.layer3.0.relu.ReLU.backward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.relu.ReLU.backward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.005283",
                        "Min": "-0.005217",
                        "Mean": "-5.361890e-07",
                        "Norm": "0.144125",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.relu.ReLU.backward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.005283",
                        "Min": "-0.005217",
                        "Mean": "-6.200127e-07",
                        "Norm": "0.20419",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0",
                    "Module.layer3.0.relu.ReLU.backward.1"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.0.bn1.BatchNorm2d.backward.0": {
                "id": "Module.layer3.0.bn1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.bn1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.005433",
                        "Min": "-0.005011",
                        "Mean": "0.0",
                        "Norm": "0.150797",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "N/A, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.bn1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.005283",
                        "Min": "-0.005217",
                        "Mean": "-5.361890e-07",
                        "Norm": "0.144125",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0",
                    "Module.layer3.0.bn1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer3.0.conv1.Conv2d.backward.0": {
                "id": "Module.layer3.0.conv1.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.conv1.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.003242",
                        "Min": "-0.002676",
                        "Mean": "1.208646e-08",
                        "Norm": "0.139735",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer3.0.conv1.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.005433",
                        "Min": "-0.005011",
                        "Mean": "0.0",
                        "Norm": "0.150797",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "N/A, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0",
                    "Module.layer3.0.conv1.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.1.BasicBlock.backward.0": {
                "id": "Module.layer2.1.BasicBlock.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.BasicBlock.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.00595",
                        "Min": "-0.006032",
                        "Mean": "1.788464e-06",
                        "Norm": "0.2636",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.1.BasicBlock.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004368",
                        "Min": "-0.004748",
                        "Mean": "1.208646e-08",
                        "Norm": "0.188543",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.Sequential.backward.0",
                "subnodes": [
                    "Module.layer2.1.relu.ReLU.backward.0",
                    "Module.layer2.1.bn2.BatchNorm2d.backward.0",
                    "Module.layer2.1.conv2.Conv2d.backward.0",
                    "Module.layer2.1.relu.ReLU.backward.1",
                    "Module.layer2.1.bn1.BatchNorm2d.backward.0",
                    "Module.layer2.1.conv1.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.1.BasicBlock.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.1.relu.ReLU.backward.0": {
                "id": "Module.layer2.1.relu.ReLU.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.relu.ReLU.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004368",
                        "Min": "-0.004748",
                        "Mean": "6.662881e-07",
                        "Norm": "0.152697",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.1.relu.ReLU.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004368",
                        "Min": "-0.004748",
                        "Mean": "1.208646e-08",
                        "Norm": "0.188543",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.1.BasicBlock.backward.0",
                    "Module.layer2.1.relu.ReLU.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.Sequential.backward.0": {
                "id": "Module.layer2.Sequential.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.Sequential.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.003609",
                        "Min": "-0.005254",
                        "Mean": "-2.737119e-07",
                        "Norm": "0.226761",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.Sequential.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004368",
                        "Min": "-0.004748",
                        "Mean": "1.208646e-08",
                        "Norm": "0.188543",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [
                    "Module.layer2.1.BasicBlock.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.1.bn2.BatchNorm2d.backward.0": {
                "id": "Module.layer2.1.bn2.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.bn2.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.005537",
                        "Min": "-0.006419",
                        "Mean": "4.547474e-14",
                        "Norm": "0.192183",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.1.bn2.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004368",
                        "Min": "-0.004748",
                        "Mean": "6.662881e-07",
                        "Norm": "0.152697",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.1.BasicBlock.backward.0",
                    "Module.layer2.1.bn2.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.1.conv2.Conv2d.backward.0": {
                "id": "Module.layer2.1.conv2.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.conv2.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004543",
                        "Min": "-0.004991",
                        "Mean": "6.954823e-07",
                        "Norm": "0.250644",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.1.conv2.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.005537",
                        "Min": "-0.006419",
                        "Mean": "4.547474e-14",
                        "Norm": "0.192183",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.1.BasicBlock.backward.0",
                    "Module.layer2.1.conv2.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.1.relu.ReLU.backward.1": {
                "id": "Module.layer2.1.relu.ReLU.backward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.relu.ReLU.backward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004543",
                        "Min": "-0.004159",
                        "Mean": "2.355963e-06",
                        "Norm": "0.177588",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.1.relu.ReLU.backward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004543",
                        "Min": "-0.004991",
                        "Mean": "6.954823e-07",
                        "Norm": "0.250644",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.1.BasicBlock.backward.0",
                    "Module.layer2.1.relu.ReLU.backward.1"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.1.bn1.BatchNorm2d.backward.0": {
                "id": "Module.layer2.1.bn1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.bn1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004246",
                        "Min": "-0.003801",
                        "Mean": "3.865353e-13",
                        "Norm": "0.159253",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.1.bn1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004543",
                        "Min": "-0.004159",
                        "Mean": "2.355963e-06",
                        "Norm": "0.177588",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.1.BasicBlock.backward.0",
                    "Module.layer2.1.bn1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.1.conv1.Conv2d.backward.0": {
                "id": "Module.layer2.1.conv1.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.conv1.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.003947",
                        "Min": "-0.00409",
                        "Mean": "1.122175e-06",
                        "Norm": "0.213347",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.1.conv1.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004246",
                        "Min": "-0.003801",
                        "Mean": "3.865353e-13",
                        "Norm": "0.159253",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.1.BasicBlock.backward.0",
                    "Module.layer2.1.conv1.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.0.BasicBlock.backward.0": {
                "id": "Module.layer2.0.BasicBlock.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.BasicBlock.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.003609",
                        "Min": "-0.005254",
                        "Mean": "-2.737119e-07",
                        "Norm": "0.226761",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.BasicBlock.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.00595",
                        "Min": "-0.006032",
                        "Mean": "1.788464e-06",
                        "Norm": "0.2636",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.Sequential.backward.0",
                "subnodes": [
                    "Module.layer2.0.relu.ReLU.backward.0",
                    "Module.layer2.0.downsample.Sequential.backward.0",
                    "Module.layer2.0.bn2.BatchNorm2d.backward.0",
                    "Module.layer2.0.conv2.Conv2d.backward.0",
                    "Module.layer2.0.relu.ReLU.backward.1",
                    "Module.layer2.0.bn1.BatchNorm2d.backward.0",
                    "Module.layer2.0.conv1.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.0.relu.ReLU.backward.0": {
                "id": "Module.layer2.0.relu.ReLU.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.relu.ReLU.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.00595",
                        "Min": "-0.006032",
                        "Mean": "2.777311e-06",
                        "Norm": "0.192543",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.relu.ReLU.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.00595",
                        "Min": "-0.006032",
                        "Mean": "1.788464e-06",
                        "Norm": "0.2636",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0",
                    "Module.layer2.0.relu.ReLU.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.0.downsample.Sequential.backward.0": {
                "id": "Module.layer2.0.downsample.Sequential.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.downsample.Sequential.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.004066",
                        "Min": "-0.004851",
                        "Mean": "4.547474e-14",
                        "Norm": "0.148232",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.downsample.Sequential.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.00595",
                        "Min": "-0.006032",
                        "Mean": "2.777311e-06",
                        "Norm": "0.192543",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.backward.0",
                "subnodes": [
                    "Module.layer2.0.downsample.1.BatchNorm2d.backward.0",
                    "Module.layer2.0.downsample.0.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0",
                    "Module.layer2.0.downsample.Sequential.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.0.downsample.1.BatchNorm2d.backward.0": {
                "id": "Module.layer2.0.downsample.1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.downsample.1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004749",
                        "Min": "-0.004585",
                        "Mean": "-2.728484e-13",
                        "Norm": "0.14894",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.downsample.1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.00595",
                        "Min": "-0.006032",
                        "Mean": "2.777311e-06",
                        "Norm": "0.192543",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.0.downsample.Sequential.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0",
                    "Module.layer2.0.downsample.Sequential.backward.0",
                    "Module.layer2.0.downsample.1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.0.downsample.0.Conv2d.backward.0": {
                "id": "Module.layer2.0.downsample.0.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.downsample.0.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.004066",
                        "Min": "-0.004851",
                        "Mean": "4.547474e-14",
                        "Norm": "0.148232",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.downsample.0.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004749",
                        "Min": "-0.004585",
                        "Mean": "-2.728484e-13",
                        "Norm": "0.14894",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.0.downsample.Sequential.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0",
                    "Module.layer2.0.downsample.Sequential.backward.0",
                    "Module.layer2.0.downsample.0.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.0.bn2.BatchNorm2d.backward.0": {
                "id": "Module.layer2.0.bn2.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.bn2.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.00708",
                        "Min": "-0.008085",
                        "Mean": "-5.456968e-13",
                        "Norm": "0.246197",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.bn2.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.00595",
                        "Min": "-0.006032",
                        "Mean": "2.777311e-06",
                        "Norm": "0.192543",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0",
                    "Module.layer2.0.bn2.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.0.conv2.Conv2d.backward.0": {
                "id": "Module.layer2.0.conv2.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.conv2.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.005883",
                        "Min": "-0.005688",
                        "Mean": "7.895345e-07",
                        "Norm": "0.328498",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.conv2.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.00708",
                        "Min": "-0.008085",
                        "Mean": "-5.456968e-13",
                        "Norm": "0.246197",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0",
                    "Module.layer2.0.conv2.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.0.relu.ReLU.backward.1": {
                "id": "Module.layer2.0.relu.ReLU.backward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.relu.ReLU.backward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.005686",
                        "Min": "-0.005685",
                        "Mean": "1.743164e-06",
                        "Norm": "0.232839",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.relu.ReLU.backward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.005883",
                        "Min": "-0.005688",
                        "Mean": "7.895345e-07",
                        "Norm": "0.328498",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0",
                    "Module.layer2.0.relu.ReLU.backward.1"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.0.bn1.BatchNorm2d.backward.0": {
                "id": "Module.layer2.0.bn1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.bn1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004441",
                        "Min": "-0.004493",
                        "Mean": "-3.637979e-13",
                        "Norm": "0.176547",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.bn1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.005686",
                        "Min": "-0.005685",
                        "Mean": "1.743164e-06",
                        "Norm": "0.232839",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0",
                    "Module.layer2.0.bn1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer2.0.conv1.Conv2d.backward.0": {
                "id": "Module.layer2.0.conv1.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.conv1.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.002586",
                        "Min": "-0.002816",
                        "Mean": "-2.737123e-07",
                        "Norm": "0.171941",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer2.0.conv1.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004441",
                        "Min": "-0.004493",
                        "Mean": "-3.637979e-13",
                        "Norm": "0.176547",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0",
                    "Module.layer2.0.conv1.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.1.BasicBlock.backward.0": {
                "id": "Module.layer1.1.BasicBlock.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.BasicBlock.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.005186",
                        "Min": "-0.005365",
                        "Mean": "9.928035e-08",
                        "Norm": "0.311783",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.1.BasicBlock.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.003609",
                        "Min": "-0.005254",
                        "Mean": "-2.737119e-07",
                        "Norm": "0.226761",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.Sequential.backward.0",
                "subnodes": [
                    "Module.layer1.1.relu.ReLU.backward.0",
                    "Module.layer1.1.bn2.BatchNorm2d.backward.0",
                    "Module.layer1.1.conv2.Conv2d.backward.0",
                    "Module.layer1.1.relu.ReLU.backward.1",
                    "Module.layer1.1.bn1.BatchNorm2d.backward.0",
                    "Module.layer1.1.conv1.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.1.BasicBlock.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.1.relu.ReLU.backward.0": {
                "id": "Module.layer1.1.relu.ReLU.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.relu.ReLU.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.003609",
                        "Min": "-0.005254",
                        "Mean": "1.113839e-07",
                        "Norm": "0.209072",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.1.relu.ReLU.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.003609",
                        "Min": "-0.005254",
                        "Mean": "-2.737119e-07",
                        "Norm": "0.226761",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.1.BasicBlock.backward.0",
                    "Module.layer1.1.relu.ReLU.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.Sequential.backward.0": {
                "id": "Module.layer1.Sequential.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.Sequential.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.00901",
                        "Min": "-0.009858",
                        "Mean": "6.431268e-07",
                        "Norm": "0.614371",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.Sequential.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.003609",
                        "Min": "-0.005254",
                        "Mean": "-2.737119e-07",
                        "Norm": "0.226761",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [
                    "Module.layer1.1.BasicBlock.backward.0",
                    "Module.layer1.0.BasicBlock.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.1.bn2.BatchNorm2d.backward.0": {
                "id": "Module.layer1.1.bn2.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.bn2.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.004873",
                        "Min": "-0.006985",
                        "Mean": "6.366463e-13",
                        "Norm": "0.263476",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.1.bn2.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.003609",
                        "Min": "-0.005254",
                        "Mean": "1.113839e-07",
                        "Norm": "0.209072",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.1.BasicBlock.backward.0",
                    "Module.layer1.1.bn2.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.1.conv2.Conv2d.backward.0": {
                "id": "Module.layer1.1.conv2.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.conv2.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.005249",
                        "Min": "-0.005144",
                        "Mean": "5.896727e-08",
                        "Norm": "0.36269",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.1.conv2.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.004873",
                        "Min": "-0.006985",
                        "Mean": "6.366463e-13",
                        "Norm": "0.263476",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.1.BasicBlock.backward.0",
                    "Module.layer1.1.conv2.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.1.relu.ReLU.backward.1": {
                "id": "Module.layer1.1.relu.ReLU.backward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.relu.ReLU.backward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.005249",
                        "Min": "-0.004949",
                        "Mean": "-2.247479e-07",
                        "Norm": "0.255762",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.1.relu.ReLU.backward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.005249",
                        "Min": "-0.005144",
                        "Mean": "5.896727e-08",
                        "Norm": "0.36269",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.1.BasicBlock.backward.0",
                    "Module.layer1.1.relu.ReLU.backward.1"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.1.bn1.BatchNorm2d.backward.0": {
                "id": "Module.layer1.1.bn1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.bn1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.00343",
                        "Min": "-0.003328",
                        "Mean": "1.818989e-13",
                        "Norm": "0.165887",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.1.bn1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.005249",
                        "Min": "-0.004949",
                        "Mean": "-2.247479e-07",
                        "Norm": "0.255762",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.1.BasicBlock.backward.0",
                    "Module.layer1.1.bn1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.1.conv1.Conv2d.backward.0": {
                "id": "Module.layer1.1.conv1.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.conv1.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.003166",
                        "Min": "-0.003639",
                        "Mean": "-1.210342e-08",
                        "Norm": "0.229291",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.1.conv1.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.00343",
                        "Min": "-0.003328",
                        "Mean": "1.818989e-13",
                        "Norm": "0.165887",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.1.BasicBlock.backward.0",
                    "Module.layer1.1.conv1.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.0.BasicBlock.backward.0": {
                "id": "Module.layer1.0.BasicBlock.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.BasicBlock.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.00901",
                        "Min": "-0.009858",
                        "Mean": "6.431268e-07",
                        "Norm": "0.614371",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.0.BasicBlock.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.005186",
                        "Min": "-0.005365",
                        "Mean": "9.928035e-08",
                        "Norm": "0.311783",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.Sequential.backward.0",
                "subnodes": [
                    "Module.layer1.0.relu.ReLU.backward.0",
                    "Module.layer1.0.bn2.BatchNorm2d.backward.0",
                    "Module.layer1.0.conv2.Conv2d.backward.0",
                    "Module.layer1.0.relu.ReLU.backward.1",
                    "Module.layer1.0.bn1.BatchNorm2d.backward.0",
                    "Module.layer1.0.conv1.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.0.BasicBlock.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.0.relu.ReLU.backward.0": {
                "id": "Module.layer1.0.relu.ReLU.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.relu.ReLU.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.005186",
                        "Min": "-0.005365",
                        "Mean": "3.088644e-07",
                        "Norm": "0.299243",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.0.relu.ReLU.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.005186",
                        "Min": "-0.005365",
                        "Mean": "9.928035e-08",
                        "Norm": "0.311783",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.0.BasicBlock.backward.0",
                    "Module.layer1.0.relu.ReLU.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.0.bn2.BatchNorm2d.backward.0": {
                "id": "Module.layer1.0.bn2.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.bn2.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.007243",
                        "Min": "-0.006519",
                        "Mean": "-7.275958e-13",
                        "Norm": "0.389929",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.0.bn2.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.005186",
                        "Min": "-0.005365",
                        "Mean": "3.088644e-07",
                        "Norm": "0.299243",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.0.BasicBlock.backward.0",
                    "Module.layer1.0.bn2.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.0.conv2.Conv2d.backward.0": {
                "id": "Module.layer1.0.conv2.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.conv2.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.007983",
                        "Min": "-0.00772",
                        "Mean": "-5.936339e-07",
                        "Norm": "0.54013",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.0.conv2.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.007243",
                        "Min": "-0.006519",
                        "Mean": "-7.275958e-13",
                        "Norm": "0.389929",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.0.BasicBlock.backward.0",
                    "Module.layer1.0.conv2.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.0.relu.ReLU.backward.1": {
                "id": "Module.layer1.0.relu.ReLU.backward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.relu.ReLU.backward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.007983",
                        "Min": "-0.00772",
                        "Mean": "2.777797e-07",
                        "Norm": "0.379333",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.0.relu.ReLU.backward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.007983",
                        "Min": "-0.00772",
                        "Mean": "-5.936339e-07",
                        "Norm": "0.54013",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.0.BasicBlock.backward.0",
                    "Module.layer1.0.relu.ReLU.backward.1"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.0.bn1.BatchNorm2d.backward.0": {
                "id": "Module.layer1.0.bn1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.bn1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.009111",
                        "Min": "-0.009193",
                        "Mean": "-7.275958e-13",
                        "Norm": "0.387683",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.0.bn1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.007983",
                        "Min": "-0.00772",
                        "Mean": "2.777797e-07",
                        "Norm": "0.379333",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.0.BasicBlock.backward.0",
                    "Module.layer1.0.bn1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.layer1.0.conv1.Conv2d.backward.0": {
                "id": "Module.layer1.0.conv1.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.conv1.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.007328",
                        "Min": "-0.008206",
                        "Mean": "3.342619e-07",
                        "Norm": "0.538403",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.layer1.0.conv1.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.009111",
                        "Min": "-0.009193",
                        "Mean": "-7.275958e-13",
                        "Norm": "0.387683",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.0.BasicBlock.backward.0",
                    "Module.layer1.0.conv1.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {
                    "precision_index": 0
                }
            },
            "Module.maxpool.MaxPool2d.backward.0": {
                "id": "Module.maxpool.MaxPool2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.maxpool.MaxPool2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "0.01485",
                        "Min": "-0.019076",
                        "Mean": "1.607818e-07",
                        "Norm": "0.615501",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.maxpool.MaxPool2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.00901",
                        "Min": "-0.009858",
                        "Mean": "6.431268e-07",
                        "Norm": "0.614371",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.maxpool.MaxPool2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {
                    "precision_index": 0
                }
            },
            "Module.relu.ReLU.backward.0": {
                "id": "Module.relu.ReLU.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.relu.ReLU.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "0.01485",
                        "Min": "-0.019076",
                        "Mean": "1.113458e-07",
                        "Norm": "0.614639",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.relu.ReLU.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "0.01485",
                        "Min": "-0.019076",
                        "Mean": "1.607818e-07",
                        "Norm": "0.615501",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.relu.ReLU.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {
                    "precision_index": 0
                }
            },
            "Module.bn1.BatchNorm2d.backward.0": {
                "id": "Module.bn1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.bn1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "0.049808",
                        "Min": "-0.064687",
                        "Mean": "1.364242e-12",
                        "Norm": "2.04307",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "input_data": {
                    "Module.bn1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "0.01485",
                        "Min": "-0.019076",
                        "Mean": "1.113458e-07",
                        "Norm": "0.614639",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.bn1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {
                    "precision_index": 0
                }
            },
            "Module.conv1.Conv2d.backward.0": {
                "id": "Module.conv1.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.conv1.Conv2d.backward.0.output.0": {
                        "value": "null"
                    }
                },
                "input_data": {
                    "Module.conv1.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "0.049808",
                        "Min": "-0.064687",
                        "Mean": "1.364242e-12",
                        "Norm": "2.04307",
                        "data_name": "-1",
                        "md5": "00000000",
                        "Max diff": "0.0",
                        "Min diff": "0.0",
                        "Mean diff": "0.0",
                        "L2norm diff": "0.0",
                        "MaxRelativeErr": "0.0%",
                        "MinRelativeErr": "0.0%",
                        "MeanRelativeErr": "0.0%, 由于Mean小于1e-06, 建议不参考此相对误差，请参考绝对误差",
                        "NormRelativeErr": "0.0%"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.conv1.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {
                    "precision_index": 0
                }
            }
        }
    },
    "Bench": {
        "root": "DefaultModel",
        "dump_data_dir": null,
        "node": {
            "DefaultModel": {
                "id": "DefaultModel",
                "node_type": 0,
                "output_data": {},
                "input_data": {},
                "upnode": "None",
                "subnodes": [
                    "Module.conv1.Conv2d.forward.0",
                    "Module.bn1.BatchNorm2d.forward.0",
                    "Module.relu.ReLU.forward.0",
                    "Module.maxpool.MaxPool2d.forward.0",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer4.Sequential.forward.0",
                    "Module.avgpool.AdaptiveAvgPool2d.forward.0",
                    "Module.fc.Linear.forward.0",
                    "Module.fc.Linear.backward.0",
                    "Module.avgpool.AdaptiveAvgPool2d.backward.0",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer1.Sequential.backward.0",
                    "Module.maxpool.MaxPool2d.backward.0",
                    "Module.relu.ReLU.backward.0",
                    "Module.bn1.BatchNorm2d.backward.0",
                    "Module.conv1.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.conv1.Conv2d.forward.0": {
                "id": "Module.conv1.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.conv1.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "1.526799",
                        "Min": "-1.559762",
                        "Mean": "-0.000263",
                        "Norm": "244.860931",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.conv1.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 3, 64, 64]",
                        "Max": "4.350435",
                        "Min": "-4.339223",
                        "Mean": "-0.001572",
                        "Norm": "350.247772",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.conv1.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 268, in _forward_impl, \n x = self.conv1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.bn1.BatchNorm2d.forward.0": {
                "id": "Module.bn1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.bn1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "4.673826",
                        "Min": "-5.146786",
                        "Mean": "4.656613e-11",
                        "Norm": "809.493835",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.bn1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "1.526799",
                        "Min": "-1.559762",
                        "Mean": "-0.000263",
                        "Norm": "244.860931",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.bn1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 269, in _forward_impl, \n x = self.bn1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.relu.ReLU.forward.0": {
                "id": "Module.relu.ReLU.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.relu.ReLU.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "4.673826",
                        "Min": "0.0",
                        "Mean": "0.397851",
                        "Norm": "572.419128",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.relu.ReLU.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "4.673826",
                        "Min": "0.0",
                        "Mean": "0.397851",
                        "Norm": "572.419128",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.relu.ReLU.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 270, in _forward_impl, \n x = self.relu(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.maxpool.MaxPool2d.forward.0": {
                "id": "Module.maxpool.MaxPool2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.maxpool.MaxPool2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.673826",
                        "Min": "0.0",
                        "Mean": "1.460092",
                        "Norm": "641.917297",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.maxpool.MaxPool2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "4.673826",
                        "Min": "0.0",
                        "Mean": "0.397851",
                        "Norm": "572.419128",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.maxpool.MaxPool2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 271, in _forward_impl, \n x = self.maxpool(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.layer1.0.BasicBlock.forward.0": {
                "id": "Module.layer1.0.BasicBlock.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.BasicBlock.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "7.29416",
                        "Min": "0.0",
                        "Mean": "1.517842",
                        "Norm": "753.920776",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.0.BasicBlock.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.673826",
                        "Min": "0.0",
                        "Mean": "1.460092",
                        "Norm": "641.917297",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.Sequential.forward.0",
                "subnodes": [
                    "Module.layer1.0.conv1.Conv2d.forward.0",
                    "Module.layer1.0.bn1.BatchNorm2d.forward.0",
                    "Module.layer1.0.relu.ReLU.forward.0",
                    "Module.layer1.0.conv2.Conv2d.forward.0",
                    "Module.layer1.0.bn2.BatchNorm2d.forward.0",
                    "Module.layer1.0.relu.ReLU.forward.1"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.0.BasicBlock.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer1.0.conv1.Conv2d.forward.0": {
                "id": "Module.layer1.0.conv1.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.conv1.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "7.74388",
                        "Min": "-7.379547",
                        "Mean": "-0.12333",
                        "Norm": "858.103699",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.0.conv1.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.673826",
                        "Min": "0.0",
                        "Mean": "1.460092",
                        "Norm": "641.917297",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.0.BasicBlock.forward.0",
                    "Module.layer1.0.conv1.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 92, in forward, \n out = self.conv1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer1.Sequential.forward.0": {
                "id": "Module.layer1.Sequential.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.Sequential.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "8.480864",
                        "Min": "0.0",
                        "Mean": "1.621092",
                        "Norm": "845.908813",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.Sequential.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.673826",
                        "Min": "0.0",
                        "Mean": "1.460092",
                        "Norm": "641.917297",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [
                    "Module.layer1.0.BasicBlock.forward.0",
                    "Module.layer1.1.BasicBlock.forward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.layer1.0.bn1.BatchNorm2d.forward.0": {
                "id": "Module.layer1.0.bn1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.bn1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.247875",
                        "Min": "-4.199296",
                        "Mean": "1.620501e-08",
                        "Norm": "404.769043",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.0.bn1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "7.74388",
                        "Min": "-7.379547",
                        "Mean": "-0.12333",
                        "Norm": "858.103699",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.0.BasicBlock.forward.0",
                    "Module.layer1.0.bn1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 93, in forward, \n out = self.bn1(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer1.0.relu.ReLU.forward.0": {
                "id": "Module.layer1.0.relu.ReLU.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.relu.ReLU.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.247875",
                        "Min": "0.0",
                        "Mean": "0.39636",
                        "Norm": "286.644501",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.0.relu.ReLU.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.247875",
                        "Min": "0.0",
                        "Mean": "0.39636",
                        "Norm": "286.644501",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.0.BasicBlock.forward.0",
                    "Module.layer1.0.relu.ReLU.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 94, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer1.0.conv2.Conv2d.forward.0": {
                "id": "Module.layer1.0.conv2.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.conv2.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.442179",
                        "Min": "-3.972987",
                        "Mean": "0.084329",
                        "Norm": "370.438843",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.0.conv2.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.247875",
                        "Min": "0.0",
                        "Mean": "0.39636",
                        "Norm": "286.644501",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.0.BasicBlock.forward.0",
                    "Module.layer1.0.conv2.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 96, in forward, \n out = self.conv2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer1.0.bn2.BatchNorm2d.forward.0": {
                "id": "Module.layer1.0.bn2.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.bn2.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.605992",
                        "Min": "-4.646146",
                        "Mean": "4.284084e-09",
                        "Norm": "404.767944",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.0.bn2.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.442179",
                        "Min": "-3.972987",
                        "Mean": "0.084329",
                        "Norm": "370.438843",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.0.BasicBlock.forward.0",
                    "Module.layer1.0.bn2.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 97, in forward, \n out = self.bn2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer1.0.relu.ReLU.forward.1": {
                "id": "Module.layer1.0.relu.ReLU.forward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.relu.ReLU.forward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "7.29416",
                        "Min": "0.0",
                        "Mean": "1.517842",
                        "Norm": "753.920776",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.0.relu.ReLU.forward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "7.29416",
                        "Min": "0.0",
                        "Mean": "1.517842",
                        "Norm": "753.920776",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.0.BasicBlock.forward.0",
                    "Module.layer1.0.relu.ReLU.forward.1"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 103, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer1.1.BasicBlock.forward.0": {
                "id": "Module.layer1.1.BasicBlock.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.BasicBlock.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "8.480864",
                        "Min": "0.0",
                        "Mean": "1.621092",
                        "Norm": "845.908813",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.1.BasicBlock.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "7.29416",
                        "Min": "0.0",
                        "Mean": "1.517842",
                        "Norm": "753.920776",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.Sequential.forward.0",
                "subnodes": [
                    "Module.layer1.1.conv1.Conv2d.forward.0",
                    "Module.layer1.1.bn1.BatchNorm2d.forward.0",
                    "Module.layer1.1.relu.ReLU.forward.0",
                    "Module.layer1.1.conv2.Conv2d.forward.0",
                    "Module.layer1.1.bn2.BatchNorm2d.forward.0",
                    "Module.layer1.1.relu.ReLU.forward.1"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.1.BasicBlock.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer1.1.conv1.Conv2d.forward.0": {
                "id": "Module.layer1.1.conv1.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.conv1.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "9.274334",
                        "Min": "-10.156013",
                        "Mean": "-0.101834",
                        "Norm": "975.393066",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.1.conv1.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "7.29416",
                        "Min": "0.0",
                        "Mean": "1.517842",
                        "Norm": "753.920776",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.1.BasicBlock.forward.0",
                    "Module.layer1.1.conv1.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 92, in forward, \n out = self.conv1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer1.1.bn1.BatchNorm2d.forward.0": {
                "id": "Module.layer1.1.bn1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.bn1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.2462",
                        "Min": "-4.49145",
                        "Mean": "-2.235174e-09",
                        "Norm": "404.770447",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.1.bn1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "9.274334",
                        "Min": "-10.156013",
                        "Mean": "-0.101834",
                        "Norm": "975.393066",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.1.BasicBlock.forward.0",
                    "Module.layer1.1.bn1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 93, in forward, \n out = self.bn1(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer1.1.relu.ReLU.forward.0": {
                "id": "Module.layer1.1.relu.ReLU.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.relu.ReLU.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.2462",
                        "Min": "0.0",
                        "Mean": "0.399545",
                        "Norm": "286.493317",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.1.relu.ReLU.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.2462",
                        "Min": "0.0",
                        "Mean": "0.399545",
                        "Norm": "286.493317",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.1.BasicBlock.forward.0",
                    "Module.layer1.1.relu.ReLU.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 94, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer1.1.conv2.Conv2d.forward.0": {
                "id": "Module.layer1.1.conv2.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.conv2.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.431858",
                        "Min": "-4.229196",
                        "Mean": "0.005514",
                        "Norm": "375.989105",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.1.conv2.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.2462",
                        "Min": "0.0",
                        "Mean": "0.399545",
                        "Norm": "286.493317",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.1.BasicBlock.forward.0",
                    "Module.layer1.1.conv2.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 96, in forward, \n out = self.conv2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer1.1.bn2.BatchNorm2d.forward.0": {
                "id": "Module.layer1.1.bn2.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.bn2.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.475619",
                        "Min": "-4.364196",
                        "Mean": "1.396984e-09",
                        "Norm": "404.76828",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.1.bn2.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "4.431858",
                        "Min": "-4.229196",
                        "Mean": "0.005514",
                        "Norm": "375.989105",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.1.BasicBlock.forward.0",
                    "Module.layer1.1.bn2.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 97, in forward, \n out = self.bn2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer1.1.relu.ReLU.forward.1": {
                "id": "Module.layer1.1.relu.ReLU.forward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.relu.ReLU.forward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "8.480864",
                        "Min": "0.0",
                        "Mean": "1.621092",
                        "Norm": "845.908813",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.1.relu.ReLU.forward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "8.480864",
                        "Min": "0.0",
                        "Mean": "1.621092",
                        "Norm": "845.908813",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.forward.0",
                    "Module.layer1.1.BasicBlock.forward.0",
                    "Module.layer1.1.relu.ReLU.forward.1"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 103, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 273, in _forward_impl, \n x = self.layer1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer2.0.BasicBlock.forward.0": {
                "id": "Module.layer2.0.BasicBlock.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.BasicBlock.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "6.058126",
                        "Min": "0.0",
                        "Mean": "0.569005",
                        "Norm": "288.38382",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.BasicBlock.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "8.480864",
                        "Min": "0.0",
                        "Mean": "1.621092",
                        "Norm": "845.908813",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.Sequential.forward.0",
                "subnodes": [
                    "Module.layer2.0.conv1.Conv2d.forward.0",
                    "Module.layer2.0.bn1.BatchNorm2d.forward.0",
                    "Module.layer2.0.relu.ReLU.forward.0",
                    "Module.layer2.0.conv2.Conv2d.forward.0",
                    "Module.layer2.0.bn2.BatchNorm2d.forward.0",
                    "Module.layer2.0.downsample.Sequential.forward.0",
                    "Module.layer2.0.relu.ReLU.forward.1"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer2.0.conv1.Conv2d.forward.0": {
                "id": "Module.layer2.0.conv1.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.conv1.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "9.363841",
                        "Min": "-8.813498",
                        "Mean": "0.116351",
                        "Norm": "582.720398",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.conv1.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "8.480864",
                        "Min": "0.0",
                        "Mean": "1.621092",
                        "Norm": "845.908813",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.0.conv1.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 92, in forward, \n out = self.conv1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer2.Sequential.forward.0": {
                "id": "Module.layer2.Sequential.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.Sequential.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "7.306092",
                        "Min": "0.0",
                        "Mean": "0.830152",
                        "Norm": "372.837189",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.Sequential.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "8.480864",
                        "Min": "0.0",
                        "Mean": "1.621092",
                        "Norm": "845.908813",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.1.BasicBlock.forward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.layer2.0.bn1.BatchNorm2d.forward.0": {
                "id": "Module.layer2.0.bn1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.bn1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.469386",
                        "Min": "-4.77158",
                        "Mean": "1.303852e-09",
                        "Norm": "286.215912",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.bn1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "9.363841",
                        "Min": "-8.813498",
                        "Mean": "0.116351",
                        "Norm": "582.720398",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.0.bn1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 93, in forward, \n out = self.bn1(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer2.0.relu.ReLU.forward.0": {
                "id": "Module.layer2.0.relu.ReLU.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.relu.ReLU.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.469386",
                        "Min": "0.0",
                        "Mean": "0.400609",
                        "Norm": "202.299973",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.relu.ReLU.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.469386",
                        "Min": "0.0",
                        "Mean": "0.400609",
                        "Norm": "202.299973",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.0.relu.ReLU.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 94, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer2.0.conv2.Conv2d.forward.0": {
                "id": "Module.layer2.0.conv2.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.conv2.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.0345",
                        "Min": "-4.125886",
                        "Mean": "-0.100337",
                        "Norm": "260.142944",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.conv2.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.469386",
                        "Min": "0.0",
                        "Mean": "0.400609",
                        "Norm": "202.299973",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.0.conv2.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 96, in forward, \n out = self.conv2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer2.0.bn2.BatchNorm2d.forward.0": {
                "id": "Module.layer2.0.bn2.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.bn2.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.152795",
                        "Min": "-4.936253",
                        "Mean": "3.725290e-10",
                        "Norm": "286.214294",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.bn2.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.0345",
                        "Min": "-4.125886",
                        "Mean": "-0.100337",
                        "Norm": "260.142944",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.0.bn2.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 97, in forward, \n out = self.bn2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer2.0.downsample.Sequential.forward.0": {
                "id": "Module.layer2.0.downsample.Sequential.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.downsample.Sequential.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.257706",
                        "Min": "-4.515994",
                        "Mean": "-1.117587e-09",
                        "Norm": "286.215851",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.downsample.Sequential.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "8.480864",
                        "Min": "0.0",
                        "Mean": "1.621092",
                        "Norm": "845.908813",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.forward.0",
                "subnodes": [
                    "Module.layer2.0.downsample.0.Conv2d.forward.0",
                    "Module.layer2.0.downsample.1.BatchNorm2d.forward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.0.downsample.Sequential.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 100, in forward, \n identity = self.downsample(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer2.0.downsample.0.Conv2d.forward.0": {
                "id": "Module.layer2.0.downsample.0.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.downsample.0.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "9.203266",
                        "Min": "-9.355068",
                        "Mean": "-0.02311",
                        "Norm": "617.127319",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.downsample.0.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "8.480864",
                        "Min": "0.0",
                        "Mean": "1.621092",
                        "Norm": "845.908813",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.0.downsample.Sequential.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.0.downsample.Sequential.forward.0",
                    "Module.layer2.0.downsample.0.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 100, in forward, \n identity = self.downsample(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer2.0.downsample.1.BatchNorm2d.forward.0": {
                "id": "Module.layer2.0.downsample.1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.downsample.1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.257706",
                        "Min": "-4.515994",
                        "Mean": "-1.117587e-09",
                        "Norm": "286.215851",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.downsample.1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "9.203266",
                        "Min": "-9.355068",
                        "Mean": "-0.02311",
                        "Norm": "617.127319",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.0.downsample.Sequential.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.0.downsample.Sequential.forward.0",
                    "Module.layer2.0.downsample.1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 100, in forward, \n identity = self.downsample(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer2.0.relu.ReLU.forward.1": {
                "id": "Module.layer2.0.relu.ReLU.forward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.relu.ReLU.forward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "6.058126",
                        "Min": "0.0",
                        "Mean": "0.569005",
                        "Norm": "288.38382",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.relu.ReLU.forward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "6.058126",
                        "Min": "0.0",
                        "Mean": "0.569005",
                        "Norm": "288.38382",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.0.BasicBlock.forward.0",
                    "Module.layer2.0.relu.ReLU.forward.1"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 103, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer2.1.BasicBlock.forward.0": {
                "id": "Module.layer2.1.BasicBlock.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.BasicBlock.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "7.306092",
                        "Min": "0.0",
                        "Mean": "0.830152",
                        "Norm": "372.837189",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.1.BasicBlock.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "6.058126",
                        "Min": "0.0",
                        "Mean": "0.569005",
                        "Norm": "288.38382",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.Sequential.forward.0",
                "subnodes": [
                    "Module.layer2.1.conv1.Conv2d.forward.0",
                    "Module.layer2.1.bn1.BatchNorm2d.forward.0",
                    "Module.layer2.1.relu.ReLU.forward.0",
                    "Module.layer2.1.conv2.Conv2d.forward.0",
                    "Module.layer2.1.bn2.BatchNorm2d.forward.0",
                    "Module.layer2.1.relu.ReLU.forward.1"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.1.BasicBlock.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer2.1.conv1.Conv2d.forward.0": {
                "id": "Module.layer2.1.conv1.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.conv1.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "6.62359",
                        "Min": "-5.580112",
                        "Mean": "0.074416",
                        "Norm": "367.649841",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.1.conv1.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "6.058126",
                        "Min": "0.0",
                        "Mean": "0.569005",
                        "Norm": "288.38382",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.1.BasicBlock.forward.0",
                    "Module.layer2.1.conv1.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 92, in forward, \n out = self.conv1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer2.1.bn1.BatchNorm2d.forward.0": {
                "id": "Module.layer2.1.bn1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.bn1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.51583",
                        "Min": "-4.101557",
                        "Mean": "-3.818422e-09",
                        "Norm": "286.215485",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.1.bn1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "6.62359",
                        "Min": "-5.580112",
                        "Mean": "0.074416",
                        "Norm": "367.649841",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.1.BasicBlock.forward.0",
                    "Module.layer2.1.bn1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 93, in forward, \n out = self.bn1(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer2.1.relu.ReLU.forward.0": {
                "id": "Module.layer2.1.relu.ReLU.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.relu.ReLU.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.51583",
                        "Min": "0.0",
                        "Mean": "0.397453",
                        "Norm": "202.738693",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.1.relu.ReLU.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.51583",
                        "Min": "0.0",
                        "Mean": "0.397453",
                        "Norm": "202.738693",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.1.BasicBlock.forward.0",
                    "Module.layer2.1.relu.ReLU.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 94, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer2.1.conv2.Conv2d.forward.0": {
                "id": "Module.layer2.1.conv2.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.conv2.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.393562",
                        "Min": "-4.753343",
                        "Mean": "-0.078746",
                        "Norm": "260.969421",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.1.conv2.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.51583",
                        "Min": "0.0",
                        "Mean": "0.397453",
                        "Norm": "202.738693",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.1.BasicBlock.forward.0",
                    "Module.layer2.1.conv2.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 96, in forward, \n out = self.conv2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer2.1.bn2.BatchNorm2d.forward.0": {
                "id": "Module.layer2.1.bn2.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.bn2.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.73594",
                        "Min": "-4.475933",
                        "Mean": "2.421439e-09",
                        "Norm": "286.214294",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.1.bn2.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "4.393562",
                        "Min": "-4.753343",
                        "Mean": "-0.078746",
                        "Norm": "260.969421",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.1.BasicBlock.forward.0",
                    "Module.layer2.1.bn2.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 97, in forward, \n out = self.bn2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer2.1.relu.ReLU.forward.1": {
                "id": "Module.layer2.1.relu.ReLU.forward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.relu.ReLU.forward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "7.306092",
                        "Min": "0.0",
                        "Mean": "0.830152",
                        "Norm": "372.837189",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.1.relu.ReLU.forward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "7.306092",
                        "Min": "0.0",
                        "Mean": "0.830152",
                        "Norm": "372.837189",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.forward.0",
                    "Module.layer2.1.BasicBlock.forward.0",
                    "Module.layer2.1.relu.ReLU.forward.1"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 103, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 274, in _forward_impl, \n x = self.layer2(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer3.0.BasicBlock.forward.0": {
                "id": "Module.layer3.0.BasicBlock.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.BasicBlock.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "6.011552",
                        "Min": "0.0",
                        "Mean": "0.558552",
                        "Norm": "202.094818",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.BasicBlock.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "7.306092",
                        "Min": "0.0",
                        "Mean": "0.830152",
                        "Norm": "372.837189",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.Sequential.forward.0",
                "subnodes": [
                    "Module.layer3.0.conv1.Conv2d.forward.0",
                    "Module.layer3.0.bn1.BatchNorm2d.forward.0",
                    "Module.layer3.0.relu.ReLU.forward.0",
                    "Module.layer3.0.conv2.Conv2d.forward.0",
                    "Module.layer3.0.bn2.BatchNorm2d.forward.0",
                    "Module.layer3.0.downsample.Sequential.forward.0",
                    "Module.layer3.0.relu.ReLU.forward.1"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer3.0.conv1.Conv2d.forward.0": {
                "id": "Module.layer3.0.conv1.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.conv1.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "5.532973",
                        "Min": "-6.165116",
                        "Mean": "0.023511",
                        "Norm": "250.68428",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.conv1.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "7.306092",
                        "Min": "0.0",
                        "Mean": "0.830152",
                        "Norm": "372.837189",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.0.conv1.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 92, in forward, \n out = self.conv1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer3.Sequential.forward.0": {
                "id": "Module.layer3.Sequential.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.Sequential.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "7.355758",
                        "Min": "0.0",
                        "Mean": "0.81968",
                        "Norm": "262.51239",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.Sequential.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "7.306092",
                        "Min": "0.0",
                        "Mean": "0.830152",
                        "Norm": "372.837189",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.1.BasicBlock.forward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.layer3.0.bn1.BatchNorm2d.forward.0": {
                "id": "Module.layer3.0.bn1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.bn1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.015517",
                        "Min": "-4.041963",
                        "Mean": "1.024455e-09",
                        "Norm": "202.384674",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.bn1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "5.532973",
                        "Min": "-6.165116",
                        "Mean": "0.023511",
                        "Norm": "250.68428",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.0.bn1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 93, in forward, \n out = self.bn1(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer3.0.relu.ReLU.forward.0": {
                "id": "Module.layer3.0.relu.ReLU.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.relu.ReLU.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.015517",
                        "Min": "0.0",
                        "Mean": "0.397493",
                        "Norm": "142.493881",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.relu.ReLU.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.015517",
                        "Min": "0.0",
                        "Mean": "0.397493",
                        "Norm": "142.493881",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.0.relu.ReLU.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 94, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer3.0.conv2.Conv2d.forward.0": {
                "id": "Module.layer3.0.conv2.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.conv2.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.085584",
                        "Min": "-3.535729",
                        "Mean": "0.009184",
                        "Norm": "171.884354",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.conv2.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.015517",
                        "Min": "0.0",
                        "Mean": "0.397493",
                        "Norm": "142.493881",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.0.conv2.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 96, in forward, \n out = self.conv2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer3.0.bn2.BatchNorm2d.forward.0": {
                "id": "Module.layer3.0.bn2.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.bn2.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.328585",
                        "Min": "-4.24462",
                        "Mean": "-5.587936e-10",
                        "Norm": "202.383789",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.bn2.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.085584",
                        "Min": "-3.535729",
                        "Mean": "0.009184",
                        "Norm": "171.884354",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.0.bn2.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 97, in forward, \n out = self.bn2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer3.0.downsample.Sequential.forward.0": {
                "id": "Module.layer3.0.downsample.Sequential.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.downsample.Sequential.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.673633",
                        "Min": "-4.118578",
                        "Mean": "2.980232e-09",
                        "Norm": "202.384674",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.downsample.Sequential.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "7.306092",
                        "Min": "0.0",
                        "Mean": "0.830152",
                        "Norm": "372.837189",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.forward.0",
                "subnodes": [
                    "Module.layer3.0.downsample.0.Conv2d.forward.0",
                    "Module.layer3.0.downsample.1.BatchNorm2d.forward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.0.downsample.Sequential.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 100, in forward, \n identity = self.downsample(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer3.0.downsample.0.Conv2d.forward.0": {
                "id": "Module.layer3.0.downsample.0.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.downsample.0.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "5.544863",
                        "Min": "-5.637341",
                        "Mean": "0.063504",
                        "Norm": "262.41275",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.downsample.0.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "7.306092",
                        "Min": "0.0",
                        "Mean": "0.830152",
                        "Norm": "372.837189",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.0.downsample.Sequential.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.0.downsample.Sequential.forward.0",
                    "Module.layer3.0.downsample.0.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 100, in forward, \n identity = self.downsample(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer3.0.downsample.1.BatchNorm2d.forward.0": {
                "id": "Module.layer3.0.downsample.1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.downsample.1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.673633",
                        "Min": "-4.118578",
                        "Mean": "2.980232e-09",
                        "Norm": "202.384674",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.downsample.1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "5.544863",
                        "Min": "-5.637341",
                        "Mean": "0.063504",
                        "Norm": "262.41275",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.0.downsample.Sequential.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.0.downsample.Sequential.forward.0",
                    "Module.layer3.0.downsample.1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 100, in forward, \n identity = self.downsample(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer3.0.relu.ReLU.forward.1": {
                "id": "Module.layer3.0.relu.ReLU.forward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.relu.ReLU.forward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "6.011552",
                        "Min": "0.0",
                        "Mean": "0.558552",
                        "Norm": "202.094818",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.relu.ReLU.forward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "6.011552",
                        "Min": "0.0",
                        "Mean": "0.558552",
                        "Norm": "202.094818",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.0.BasicBlock.forward.0",
                    "Module.layer3.0.relu.ReLU.forward.1"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 103, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer3.1.BasicBlock.forward.0": {
                "id": "Module.layer3.1.BasicBlock.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.BasicBlock.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "7.355758",
                        "Min": "0.0",
                        "Mean": "0.81968",
                        "Norm": "262.51239",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.1.BasicBlock.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "6.011552",
                        "Min": "0.0",
                        "Mean": "0.558552",
                        "Norm": "202.094818",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.Sequential.forward.0",
                "subnodes": [
                    "Module.layer3.1.conv1.Conv2d.forward.0",
                    "Module.layer3.1.bn1.BatchNorm2d.forward.0",
                    "Module.layer3.1.relu.ReLU.forward.0",
                    "Module.layer3.1.conv2.Conv2d.forward.0",
                    "Module.layer3.1.bn2.BatchNorm2d.forward.0",
                    "Module.layer3.1.relu.ReLU.forward.1"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.1.BasicBlock.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer3.1.conv1.Conv2d.forward.0": {
                "id": "Module.layer3.1.conv1.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.conv1.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "6.445492",
                        "Min": "-5.73983",
                        "Mean": "0.056189",
                        "Norm": "242.794586",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.1.conv1.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "6.011552",
                        "Min": "0.0",
                        "Mean": "0.558552",
                        "Norm": "202.094818",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.1.BasicBlock.forward.0",
                    "Module.layer3.1.conv1.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 92, in forward, \n out = self.conv1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer3.1.bn1.BatchNorm2d.forward.0": {
                "id": "Module.layer3.1.bn1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.bn1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.64597",
                        "Min": "-4.302232",
                        "Mean": "6.053597e-10",
                        "Norm": "202.384811",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.1.bn1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "6.445492",
                        "Min": "-5.73983",
                        "Mean": "0.056189",
                        "Norm": "242.794586",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.1.BasicBlock.forward.0",
                    "Module.layer3.1.bn1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 93, in forward, \n out = self.bn1(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer3.1.relu.ReLU.forward.0": {
                "id": "Module.layer3.1.relu.ReLU.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.relu.ReLU.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.64597",
                        "Min": "0.0",
                        "Mean": "0.397107",
                        "Norm": "143.5979",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.1.relu.ReLU.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.64597",
                        "Min": "0.0",
                        "Mean": "0.397107",
                        "Norm": "143.5979",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.1.BasicBlock.forward.0",
                    "Module.layer3.1.relu.ReLU.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 94, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer3.1.conv2.Conv2d.forward.0": {
                "id": "Module.layer3.1.conv2.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.conv2.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "3.904869",
                        "Min": "-3.915274",
                        "Mean": "0.000739",
                        "Norm": "175.362854",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.1.conv2.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.64597",
                        "Min": "0.0",
                        "Mean": "0.397107",
                        "Norm": "143.5979",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.1.BasicBlock.forward.0",
                    "Module.layer3.1.conv2.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 96, in forward, \n out = self.conv2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer3.1.bn2.BatchNorm2d.forward.0": {
                "id": "Module.layer3.1.bn2.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.bn2.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "4.820035",
                        "Min": "-4.248729",
                        "Mean": "3.725290e-09",
                        "Norm": "202.38385",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.1.bn2.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "3.904869",
                        "Min": "-3.915274",
                        "Mean": "0.000739",
                        "Norm": "175.362854",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.1.BasicBlock.forward.0",
                    "Module.layer3.1.bn2.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 97, in forward, \n out = self.bn2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer3.1.relu.ReLU.forward.1": {
                "id": "Module.layer3.1.relu.ReLU.forward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.relu.ReLU.forward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "7.355758",
                        "Min": "0.0",
                        "Mean": "0.81968",
                        "Norm": "262.51239",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.1.relu.ReLU.forward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "7.355758",
                        "Min": "0.0",
                        "Mean": "0.81968",
                        "Norm": "262.51239",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.forward.0",
                    "Module.layer3.1.BasicBlock.forward.0",
                    "Module.layer3.1.relu.ReLU.forward.1"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 103, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 275, in _forward_impl, \n x = self.layer3(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer4.0.BasicBlock.forward.0": {
                "id": "Module.layer4.0.BasicBlock.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.BasicBlock.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.219019",
                        "Min": "0.0",
                        "Mean": "0.561198",
                        "Norm": "141.888809",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.BasicBlock.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "7.355758",
                        "Min": "0.0",
                        "Mean": "0.81968",
                        "Norm": "262.51239",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.Sequential.forward.0",
                "subnodes": [
                    "Module.layer4.0.conv1.Conv2d.forward.0",
                    "Module.layer4.0.bn1.BatchNorm2d.forward.0",
                    "Module.layer4.0.relu.ReLU.forward.0",
                    "Module.layer4.0.conv2.Conv2d.forward.0",
                    "Module.layer4.0.bn2.BatchNorm2d.forward.0",
                    "Module.layer4.0.downsample.Sequential.forward.0",
                    "Module.layer4.0.relu.ReLU.forward.1"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer4.0.conv1.Conv2d.forward.0": {
                "id": "Module.layer4.0.conv1.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.conv1.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.17719",
                        "Min": "-5.021754",
                        "Mean": "-0.003242",
                        "Norm": "160.062332",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.conv1.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "7.355758",
                        "Min": "0.0",
                        "Mean": "0.81968",
                        "Norm": "262.51239",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.0.conv1.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 92, in forward, \n out = self.conv1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer4.Sequential.forward.0": {
                "id": "Module.layer4.Sequential.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.Sequential.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.209611",
                        "Min": "0.0",
                        "Mean": "0.82681",
                        "Norm": "184.159729",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.Sequential.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "7.355758",
                        "Min": "0.0",
                        "Mean": "0.81968",
                        "Norm": "262.51239",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.1.BasicBlock.forward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.layer4.0.bn1.BatchNorm2d.forward.0": {
                "id": "Module.layer4.0.bn1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.bn1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "4.531161",
                        "Min": "-4.494643",
                        "Mean": "0.0",
                        "Norm": "143.107346",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.bn1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.17719",
                        "Min": "-5.021754",
                        "Mean": "-0.003242",
                        "Norm": "160.062332",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.0.bn1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 93, in forward, \n out = self.bn1(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer4.0.relu.ReLU.forward.0": {
                "id": "Module.layer4.0.relu.ReLU.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.relu.ReLU.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "4.531161",
                        "Min": "0.0",
                        "Mean": "0.396782",
                        "Norm": "101.735374",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.relu.ReLU.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "4.531161",
                        "Min": "0.0",
                        "Mean": "0.396782",
                        "Norm": "101.735374",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.0.relu.ReLU.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 94, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer4.0.conv2.Conv2d.forward.0": {
                "id": "Module.layer4.0.conv2.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.conv2.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "2.548945",
                        "Min": "-2.623174",
                        "Mean": "-0.024468",
                        "Norm": "96.85141",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.conv2.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "4.531161",
                        "Min": "0.0",
                        "Mean": "0.396782",
                        "Norm": "101.735374",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.0.conv2.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 96, in forward, \n out = self.conv2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer4.0.bn2.BatchNorm2d.forward.0": {
                "id": "Module.layer4.0.bn2.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.bn2.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "3.43048",
                        "Min": "-3.390204",
                        "Mean": "-5.587936e-10",
                        "Norm": "143.106155",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.bn2.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "2.548945",
                        "Min": "-2.623174",
                        "Mean": "-0.024468",
                        "Norm": "96.85141",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.0.bn2.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 97, in forward, \n out = self.bn2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer4.0.downsample.Sequential.forward.0": {
                "id": "Module.layer4.0.downsample.Sequential.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.downsample.Sequential.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "4.162686",
                        "Min": "-4.141354",
                        "Mean": "-1.396984e-09",
                        "Norm": "143.107498",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.downsample.Sequential.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "7.355758",
                        "Min": "0.0",
                        "Mean": "0.81968",
                        "Norm": "262.51239",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.forward.0",
                "subnodes": [
                    "Module.layer4.0.downsample.0.Conv2d.forward.0",
                    "Module.layer4.0.downsample.1.BatchNorm2d.forward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.0.downsample.Sequential.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 100, in forward, \n identity = self.downsample(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer4.0.downsample.0.Conv2d.forward.0": {
                "id": "Module.layer4.0.downsample.0.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.downsample.0.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "5.574177",
                        "Min": "-5.778933",
                        "Mean": "0.001088",
                        "Norm": "182.966492",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.downsample.0.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "7.355758",
                        "Min": "0.0",
                        "Mean": "0.81968",
                        "Norm": "262.51239",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.0.downsample.Sequential.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.0.downsample.Sequential.forward.0",
                    "Module.layer4.0.downsample.0.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 100, in forward, \n identity = self.downsample(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer4.0.downsample.1.BatchNorm2d.forward.0": {
                "id": "Module.layer4.0.downsample.1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.downsample.1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "4.162686",
                        "Min": "-4.141354",
                        "Mean": "-1.396984e-09",
                        "Norm": "143.107498",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.downsample.1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "5.574177",
                        "Min": "-5.778933",
                        "Mean": "0.001088",
                        "Norm": "182.966492",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.0.downsample.Sequential.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.0.downsample.Sequential.forward.0",
                    "Module.layer4.0.downsample.1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 100, in forward, \n identity = self.downsample(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer4.0.relu.ReLU.forward.1": {
                "id": "Module.layer4.0.relu.ReLU.forward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.relu.ReLU.forward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.219019",
                        "Min": "0.0",
                        "Mean": "0.561198",
                        "Norm": "141.888809",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.relu.ReLU.forward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.219019",
                        "Min": "0.0",
                        "Mean": "0.561198",
                        "Norm": "141.888809",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.0.BasicBlock.forward.0",
                    "Module.layer4.0.relu.ReLU.forward.1"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 103, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer4.1.BasicBlock.forward.0": {
                "id": "Module.layer4.1.BasicBlock.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.BasicBlock.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.209611",
                        "Min": "0.0",
                        "Mean": "0.82681",
                        "Norm": "184.159729",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.1.BasicBlock.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.219019",
                        "Min": "0.0",
                        "Mean": "0.561198",
                        "Norm": "141.888809",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.Sequential.forward.0",
                "subnodes": [
                    "Module.layer4.1.conv1.Conv2d.forward.0",
                    "Module.layer4.1.bn1.BatchNorm2d.forward.0",
                    "Module.layer4.1.relu.ReLU.forward.0",
                    "Module.layer4.1.conv2.Conv2d.forward.0",
                    "Module.layer4.1.bn2.BatchNorm2d.forward.0",
                    "Module.layer4.1.relu.ReLU.forward.1"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.1.BasicBlock.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer4.1.conv1.Conv2d.forward.0": {
                "id": "Module.layer4.1.conv1.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.conv1.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "3.864757",
                        "Min": "-3.787591",
                        "Mean": "0.002277",
                        "Norm": "133.55986",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.1.conv1.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.219019",
                        "Min": "0.0",
                        "Mean": "0.561198",
                        "Norm": "141.888809",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.1.BasicBlock.forward.0",
                    "Module.layer4.1.conv1.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 92, in forward, \n out = self.conv1(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer4.1.bn1.BatchNorm2d.forward.0": {
                "id": "Module.layer4.1.bn1.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.bn1.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "3.722916",
                        "Min": "-3.694792",
                        "Mean": "1.490116e-09",
                        "Norm": "143.107239",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.1.bn1.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "3.864757",
                        "Min": "-3.787591",
                        "Mean": "0.002277",
                        "Norm": "133.55986",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.1.BasicBlock.forward.0",
                    "Module.layer4.1.bn1.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 93, in forward, \n out = self.bn1(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer4.1.relu.ReLU.forward.0": {
                "id": "Module.layer4.1.relu.ReLU.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.relu.ReLU.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "3.722916",
                        "Min": "0.0",
                        "Mean": "0.402127",
                        "Norm": "101.228134",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.1.relu.ReLU.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "3.722916",
                        "Min": "0.0",
                        "Mean": "0.402127",
                        "Norm": "101.228134",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.1.BasicBlock.forward.0",
                    "Module.layer4.1.relu.ReLU.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 94, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer4.1.conv2.Conv2d.forward.0": {
                "id": "Module.layer4.1.conv2.Conv2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.conv2.Conv2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "2.484763",
                        "Min": "-2.720093",
                        "Mean": "0.013722",
                        "Norm": "95.469269",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.1.conv2.Conv2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "3.722916",
                        "Min": "0.0",
                        "Mean": "0.402127",
                        "Norm": "101.228134",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.1.BasicBlock.forward.0",
                    "Module.layer4.1.conv2.Conv2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 96, in forward, \n out = self.conv2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer4.1.bn2.BatchNorm2d.forward.0": {
                "id": "Module.layer4.1.bn2.BatchNorm2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.bn2.BatchNorm2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "3.644991",
                        "Min": "-3.459976",
                        "Mean": "-4.656613e-10",
                        "Norm": "143.106094",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.1.bn2.BatchNorm2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "2.484763",
                        "Min": "-2.720093",
                        "Mean": "0.013722",
                        "Norm": "95.469269",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.1.BasicBlock.forward.0",
                    "Module.layer4.1.bn2.BatchNorm2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 97, in forward, \n out = self.bn2(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.layer4.1.relu.ReLU.forward.1": {
                "id": "Module.layer4.1.relu.ReLU.forward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.relu.ReLU.forward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.209611",
                        "Min": "0.0",
                        "Mean": "0.82681",
                        "Norm": "184.159729",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.1.relu.ReLU.forward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.209611",
                        "Min": "0.0",
                        "Mean": "0.82681",
                        "Norm": "184.159729",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.forward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.forward.0",
                    "Module.layer4.1.BasicBlock.forward.0",
                    "Module.layer4.1.relu.ReLU.forward.1"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 103, in forward, \n out = self.relu(out)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/container.py, line 215, in forward, \n input = module(input)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1568, in _call_impl, \n result = forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 276, in _forward_impl, \n x = self.layer4(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "data": {}
            },
            "Module.avgpool.AdaptiveAvgPool2d.forward.0": {
                "id": "Module.avgpool.AdaptiveAvgPool2d.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.avgpool.AdaptiveAvgPool2d.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 1, 1]",
                        "Max": "2.68325",
                        "Min": "0.0",
                        "Mean": "0.82681",
                        "Norm": "66.964317",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.avgpool.AdaptiveAvgPool2d.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "6.209611",
                        "Min": "0.0",
                        "Mean": "0.82681",
                        "Norm": "184.159729",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.avgpool.AdaptiveAvgPool2d.forward.0"
                ],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 278, in _forward_impl, \n x = self.avgpool(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.fc.Linear.forward.0": {
                "id": "Module.fc.Linear.forward.0",
                "node_type": 0,
                "output_data": {
                    "Module.fc.Linear.forward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 10]",
                        "Max": "1.236255",
                        "Min": "-1.562365",
                        "Mean": "-0.12689",
                        "Norm": "5.357258",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.fc.Linear.forward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512]",
                        "Max": "2.68325",
                        "Min": "0.0",
                        "Mean": "0.82681",
                        "Norm": "66.964317",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [],
                "suggestions": {},
                "stack_info": [
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 280, in _forward_impl, \n x = self.fc(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torchvision/models/resnet.py, line 285, in forward, \n return self._forward_impl(x)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1527, in _call_impl, \n return forward_call(*args, **kwargs)",
                    "File /home/louyujing/miniconda3/lib/python3.9/site-packages/torch/nn/modules/module.py, line 1518, in _wrapped_call_impl, \n return self._call_impl(*args, **kwargs)",
                    "File /home/louyujing/visualization/resnet18.py, line 40, in <module>, \n outputs = model(inputs)"
                ],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.fc.Linear.backward.0": {
                "id": "Module.fc.Linear.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.fc.Linear.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512]",
                        "Max": "0.006356",
                        "Min": "-0.00662",
                        "Mean": "0.000117",
                        "Norm": "0.176545",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.fc.Linear.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 10]",
                        "Max": "0.03222",
                        "Min": "-0.097696",
                        "Mean": "1.490116e-10",
                        "Norm": "0.311353",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.avgpool.AdaptiveAvgPool2d.backward.0": {
                "id": "Module.avgpool.AdaptiveAvgPool2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.avgpool.AdaptiveAvgPool2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.001589",
                        "Min": "-0.001655",
                        "Mean": "2.922326e-05",
                        "Norm": "0.088272",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.avgpool.AdaptiveAvgPool2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 1, 1]",
                        "Max": "0.006356",
                        "Min": "-0.00662",
                        "Mean": "0.000117",
                        "Norm": "0.176545",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.avgpool.AdaptiveAvgPool2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.layer4.1.BasicBlock.backward.0": {
                "id": "Module.layer4.1.BasicBlock.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.BasicBlock.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003044",
                        "Min": "-0.003159",
                        "Mean": "2.016556e-05",
                        "Norm": "0.112632",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.1.BasicBlock.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.001589",
                        "Min": "-0.001655",
                        "Mean": "2.922326e-05",
                        "Norm": "0.088272",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.Sequential.backward.0",
                "subnodes": [
                    "Module.layer4.1.relu.ReLU.backward.0",
                    "Module.layer4.1.bn2.BatchNorm2d.backward.0",
                    "Module.layer4.1.conv2.Conv2d.backward.0",
                    "Module.layer4.1.relu.ReLU.backward.1",
                    "Module.layer4.1.bn1.BatchNorm2d.backward.0",
                    "Module.layer4.1.conv1.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.1.BasicBlock.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer4.1.relu.ReLU.backward.0": {
                "id": "Module.layer4.1.relu.ReLU.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.relu.ReLU.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.001589",
                        "Min": "-0.001655",
                        "Mean": "2.170244e-05",
                        "Norm": "0.071178",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.1.relu.ReLU.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.001589",
                        "Min": "-0.001655",
                        "Mean": "2.922326e-05",
                        "Norm": "0.088272",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.1.BasicBlock.backward.0",
                    "Module.layer4.1.relu.ReLU.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer4.Sequential.backward.0": {
                "id": "Module.layer4.Sequential.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.Sequential.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004012",
                        "Min": "-0.003481",
                        "Mean": "1.283064e-07",
                        "Norm": "0.12491",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.Sequential.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.001589",
                        "Min": "-0.001655",
                        "Mean": "2.922326e-05",
                        "Norm": "0.088272",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [
                    "Module.layer4.1.BasicBlock.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.layer4.1.bn2.BatchNorm2d.backward.0": {
                "id": "Module.layer4.1.bn2.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.bn2.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.00349",
                        "Min": "-0.003203",
                        "Mean": "-1.818989e-13",
                        "Norm": "0.114767",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.1.bn2.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.001589",
                        "Min": "-0.001655",
                        "Mean": "2.170244e-05",
                        "Norm": "0.071178",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.1.BasicBlock.backward.0",
                    "Module.layer4.1.bn2.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer4.1.conv2.Conv2d.backward.0": {
                "id": "Module.layer4.1.conv2.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.conv2.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003047",
                        "Min": "-0.003687",
                        "Mean": "5.127279e-08",
                        "Norm": "0.107756",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.1.conv2.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.00349",
                        "Min": "-0.003203",
                        "Mean": "-1.818989e-13",
                        "Norm": "0.114767",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.1.BasicBlock.backward.0",
                    "Module.layer4.1.conv2.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer4.1.relu.ReLU.backward.1": {
                "id": "Module.layer4.1.relu.ReLU.backward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.relu.ReLU.backward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003023",
                        "Min": "-0.002646",
                        "Mean": "9.799842e-08",
                        "Norm": "0.075418",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.1.relu.ReLU.backward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003047",
                        "Min": "-0.003687",
                        "Mean": "5.127279e-08",
                        "Norm": "0.107756",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.1.BasicBlock.backward.0",
                    "Module.layer4.1.relu.ReLU.backward.1"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer4.1.bn1.BatchNorm2d.backward.0": {
                "id": "Module.layer4.1.bn1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.bn1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.00392",
                        "Min": "-0.00384",
                        "Mean": "2.160050e-13",
                        "Norm": "0.093361",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.1.bn1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003023",
                        "Min": "-0.002646",
                        "Mean": "9.799842e-08",
                        "Norm": "0.075418",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.1.BasicBlock.backward.0",
                    "Module.layer4.1.bn1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer4.1.conv1.Conv2d.backward.0": {
                "id": "Module.layer4.1.conv1.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.1.conv1.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.002777",
                        "Min": "-0.002687",
                        "Mean": "-1.536876e-06",
                        "Norm": "0.087284",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.1.conv1.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.00392",
                        "Min": "-0.00384",
                        "Mean": "2.160050e-13",
                        "Norm": "0.093361",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.1.BasicBlock.backward.0",
                    "Module.layer4.1.conv1.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer4.0.BasicBlock.backward.0": {
                "id": "Module.layer4.0.BasicBlock.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.BasicBlock.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004012",
                        "Min": "-0.003481",
                        "Mean": "1.283064e-07",
                        "Norm": "0.12491",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.BasicBlock.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003044",
                        "Min": "-0.003159",
                        "Mean": "2.016556e-05",
                        "Norm": "0.112632",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.Sequential.backward.0",
                "subnodes": [
                    "Module.layer4.0.relu.ReLU.backward.0",
                    "Module.layer4.0.downsample.Sequential.backward.0",
                    "Module.layer4.0.bn2.BatchNorm2d.backward.0",
                    "Module.layer4.0.conv2.Conv2d.backward.0",
                    "Module.layer4.0.relu.ReLU.backward.1",
                    "Module.layer4.0.bn1.BatchNorm2d.backward.0",
                    "Module.layer4.0.conv1.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer4.0.relu.ReLU.backward.0": {
                "id": "Module.layer4.0.relu.ReLU.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.relu.ReLU.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003044",
                        "Min": "-0.003159",
                        "Mean": "1.279740e-05",
                        "Norm": "0.082885",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.relu.ReLU.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003044",
                        "Min": "-0.003159",
                        "Mean": "2.016556e-05",
                        "Norm": "0.112632",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0",
                    "Module.layer4.0.relu.ReLU.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer4.0.downsample.Sequential.backward.0": {
                "id": "Module.layer4.0.downsample.Sequential.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.downsample.Sequential.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004114",
                        "Min": "-0.003346",
                        "Mean": "-4.547474e-14",
                        "Norm": "0.087317",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.downsample.Sequential.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003044",
                        "Min": "-0.003159",
                        "Mean": "1.279740e-05",
                        "Norm": "0.082885",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.backward.0",
                "subnodes": [
                    "Module.layer4.0.downsample.1.BatchNorm2d.backward.0",
                    "Module.layer4.0.downsample.0.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0",
                    "Module.layer4.0.downsample.Sequential.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer4.0.downsample.1.BatchNorm2d.backward.0": {
                "id": "Module.layer4.0.downsample.1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.downsample.1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.004101",
                        "Min": "-0.003454",
                        "Mean": "-3.637979e-13",
                        "Norm": "0.087384",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.downsample.1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003044",
                        "Min": "-0.003159",
                        "Mean": "1.279740e-05",
                        "Norm": "0.082885",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.0.downsample.Sequential.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0",
                    "Module.layer4.0.downsample.Sequential.backward.0",
                    "Module.layer4.0.downsample.1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer4.0.downsample.0.Conv2d.backward.0": {
                "id": "Module.layer4.0.downsample.0.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.downsample.0.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004114",
                        "Min": "-0.003346",
                        "Mean": "-4.547474e-14",
                        "Norm": "0.087317",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.downsample.0.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.004101",
                        "Min": "-0.003454",
                        "Mean": "-3.637979e-13",
                        "Norm": "0.087384",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.0.downsample.Sequential.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0",
                    "Module.layer4.0.downsample.Sequential.backward.0",
                    "Module.layer4.0.downsample.0.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer4.0.bn2.BatchNorm2d.backward.0": {
                "id": "Module.layer4.0.bn2.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.bn2.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.006026",
                        "Min": "-0.006504",
                        "Mean": "7.275958e-13",
                        "Norm": "0.138286",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.bn2.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.003044",
                        "Min": "-0.003159",
                        "Mean": "1.279740e-05",
                        "Norm": "0.082885",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0",
                    "Module.layer4.0.bn2.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer4.0.conv2.Conv2d.backward.0": {
                "id": "Module.layer4.0.conv2.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.conv2.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.00354",
                        "Min": "-0.003561",
                        "Mean": "2.937198e-06",
                        "Norm": "0.130315",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.conv2.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.006026",
                        "Min": "-0.006504",
                        "Mean": "7.275958e-13",
                        "Norm": "0.138286",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0",
                    "Module.layer4.0.conv2.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer4.0.relu.ReLU.backward.1": {
                "id": "Module.layer4.0.relu.ReLU.backward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.relu.ReLU.backward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.00354",
                        "Min": "-0.003561",
                        "Mean": "-8.934543e-07",
                        "Norm": "0.092057",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.relu.ReLU.backward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.00354",
                        "Min": "-0.003561",
                        "Mean": "2.937198e-06",
                        "Norm": "0.130315",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0",
                    "Module.layer4.0.relu.ReLU.backward.1"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer4.0.bn1.BatchNorm2d.backward.0": {
                "id": "Module.layer4.0.bn1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.bn1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.004244",
                        "Min": "-0.004086",
                        "Mean": "-4.547474e-13",
                        "Norm": "0.106542",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.bn1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.00354",
                        "Min": "-0.003561",
                        "Mean": "-8.934543e-07",
                        "Norm": "0.092057",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0",
                    "Module.layer4.0.bn1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer4.0.conv1.Conv2d.backward.0": {
                "id": "Module.layer4.0.conv1.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer4.0.conv1.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.002732",
                        "Min": "-0.002337",
                        "Mean": "1.283062e-07",
                        "Norm": "0.088477",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer4.0.conv1.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 512, 2, 2]",
                        "Max": "0.004244",
                        "Min": "-0.004086",
                        "Mean": "-4.547474e-13",
                        "Norm": "0.106542",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer4.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer4.Sequential.backward.0",
                    "Module.layer4.0.BasicBlock.backward.0",
                    "Module.layer4.0.conv1.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer3.1.BasicBlock.backward.0": {
                "id": "Module.layer3.1.BasicBlock.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.BasicBlock.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004265",
                        "Min": "-0.004394",
                        "Mean": "2.575660e-07",
                        "Norm": "0.166487",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.1.BasicBlock.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004012",
                        "Min": "-0.003481",
                        "Mean": "1.283064e-07",
                        "Norm": "0.12491",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.Sequential.backward.0",
                "subnodes": [
                    "Module.layer3.1.relu.ReLU.backward.0",
                    "Module.layer3.1.bn2.BatchNorm2d.backward.0",
                    "Module.layer3.1.conv2.Conv2d.backward.0",
                    "Module.layer3.1.relu.ReLU.backward.1",
                    "Module.layer3.1.bn1.BatchNorm2d.backward.0",
                    "Module.layer3.1.conv1.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.1.BasicBlock.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer3.1.relu.ReLU.backward.0": {
                "id": "Module.layer3.1.relu.ReLU.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.relu.ReLU.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004012",
                        "Min": "-0.003481",
                        "Mean": "5.267739e-07",
                        "Norm": "0.100327",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.1.relu.ReLU.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004012",
                        "Min": "-0.003481",
                        "Mean": "1.283064e-07",
                        "Norm": "0.12491",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.1.BasicBlock.backward.0",
                    "Module.layer3.1.relu.ReLU.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer3.Sequential.backward.0": {
                "id": "Module.layer3.Sequential.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.Sequential.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004368",
                        "Min": "-0.004748",
                        "Mean": "1.208646e-08",
                        "Norm": "0.188543",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.Sequential.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004012",
                        "Min": "-0.003481",
                        "Mean": "1.283064e-07",
                        "Norm": "0.12491",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [
                    "Module.layer3.1.BasicBlock.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.layer3.1.bn2.BatchNorm2d.backward.0": {
                "id": "Module.layer3.1.bn2.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.bn2.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.005349",
                        "Min": "-0.00458",
                        "Mean": "5.456968e-13",
                        "Norm": "0.134192",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.1.bn2.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004012",
                        "Min": "-0.003481",
                        "Mean": "5.267739e-07",
                        "Norm": "0.100327",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.1.BasicBlock.backward.0",
                    "Module.layer3.1.bn2.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer3.1.conv2.Conv2d.backward.0": {
                "id": "Module.layer3.1.conv2.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.conv2.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004227",
                        "Min": "-0.003777",
                        "Mean": "-1.105049e-06",
                        "Norm": "0.161834",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.1.conv2.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.005349",
                        "Min": "-0.00458",
                        "Mean": "5.456968e-13",
                        "Norm": "0.134192",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.1.BasicBlock.backward.0",
                    "Module.layer3.1.conv2.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer3.1.relu.ReLU.backward.1": {
                "id": "Module.layer3.1.relu.ReLU.backward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.relu.ReLU.backward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.003753",
                        "Min": "-0.003777",
                        "Mean": "-1.121872e-07",
                        "Norm": "0.113553",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.1.relu.ReLU.backward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004227",
                        "Min": "-0.003777",
                        "Mean": "-1.105049e-06",
                        "Norm": "0.161834",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.1.BasicBlock.backward.0",
                    "Module.layer3.1.relu.ReLU.backward.1"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer3.1.bn1.BatchNorm2d.backward.0": {
                "id": "Module.layer3.1.bn1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.bn1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004302",
                        "Min": "-0.003597",
                        "Mean": "4.547474e-14",
                        "Norm": "0.108404",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.1.bn1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.003753",
                        "Min": "-0.003777",
                        "Mean": "-1.121872e-07",
                        "Norm": "0.113553",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.1.BasicBlock.backward.0",
                    "Module.layer3.1.bn1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer3.1.conv1.Conv2d.backward.0": {
                "id": "Module.layer3.1.conv1.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.1.conv1.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.003036",
                        "Min": "-0.002772",
                        "Mean": "-2.692081e-07",
                        "Norm": "0.133319",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.1.conv1.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004302",
                        "Min": "-0.003597",
                        "Mean": "4.547474e-14",
                        "Norm": "0.108404",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.1.BasicBlock.backward.0",
                    "Module.layer3.1.conv1.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer3.0.BasicBlock.backward.0": {
                "id": "Module.layer3.0.BasicBlock.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.BasicBlock.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004368",
                        "Min": "-0.004748",
                        "Mean": "1.208646e-08",
                        "Norm": "0.188543",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.BasicBlock.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004265",
                        "Min": "-0.004394",
                        "Mean": "2.575660e-07",
                        "Norm": "0.166487",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.Sequential.backward.0",
                "subnodes": [
                    "Module.layer3.0.relu.ReLU.backward.0",
                    "Module.layer3.0.downsample.Sequential.backward.0",
                    "Module.layer3.0.bn2.BatchNorm2d.backward.0",
                    "Module.layer3.0.conv2.Conv2d.backward.0",
                    "Module.layer3.0.relu.ReLU.backward.1",
                    "Module.layer3.0.bn1.BatchNorm2d.backward.0",
                    "Module.layer3.0.conv1.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer3.0.relu.ReLU.backward.0": {
                "id": "Module.layer3.0.relu.ReLU.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.relu.ReLU.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004265",
                        "Min": "-0.004394",
                        "Mean": "4.540960e-07",
                        "Norm": "0.122012",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.relu.ReLU.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004265",
                        "Min": "-0.004394",
                        "Mean": "2.575660e-07",
                        "Norm": "0.166487",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0",
                    "Module.layer3.0.relu.ReLU.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer3.0.downsample.Sequential.backward.0": {
                "id": "Module.layer3.0.downsample.Sequential.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.downsample.Sequential.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004002",
                        "Min": "-0.004525",
                        "Mean": "3.410605e-13",
                        "Norm": "0.1262",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.downsample.Sequential.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004265",
                        "Min": "-0.004394",
                        "Mean": "4.540960e-07",
                        "Norm": "0.122012",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.backward.0",
                "subnodes": [
                    "Module.layer3.0.downsample.1.BatchNorm2d.backward.0",
                    "Module.layer3.0.downsample.0.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0",
                    "Module.layer3.0.downsample.Sequential.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer3.0.downsample.1.BatchNorm2d.backward.0": {
                "id": "Module.layer3.0.downsample.1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.downsample.1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004036",
                        "Min": "-0.005194",
                        "Mean": "0.0",
                        "Norm": "0.126903",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.downsample.1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004265",
                        "Min": "-0.004394",
                        "Mean": "4.540960e-07",
                        "Norm": "0.122012",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.0.downsample.Sequential.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0",
                    "Module.layer3.0.downsample.Sequential.backward.0",
                    "Module.layer3.0.downsample.1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer3.0.downsample.0.Conv2d.backward.0": {
                "id": "Module.layer3.0.downsample.0.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.downsample.0.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004002",
                        "Min": "-0.004525",
                        "Mean": "3.410605e-13",
                        "Norm": "0.1262",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.downsample.0.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004036",
                        "Min": "-0.005194",
                        "Mean": "0.0",
                        "Norm": "0.126903",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.0.downsample.Sequential.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0",
                    "Module.layer3.0.downsample.Sequential.backward.0",
                    "Module.layer3.0.downsample.0.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer3.0.bn2.BatchNorm2d.backward.0": {
                "id": "Module.layer3.0.bn2.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.bn2.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.006225",
                        "Min": "-0.005798",
                        "Mean": "-3.637979e-13",
                        "Norm": "0.166553",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.bn2.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.004265",
                        "Min": "-0.004394",
                        "Mean": "4.540960e-07",
                        "Norm": "0.122012",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0",
                    "Module.layer3.0.bn2.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer3.0.conv2.Conv2d.backward.0": {
                "id": "Module.layer3.0.conv2.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.conv2.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.005283",
                        "Min": "-0.005217",
                        "Mean": "-6.200127e-07",
                        "Norm": "0.20419",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.conv2.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.006225",
                        "Min": "-0.005798",
                        "Mean": "-3.637979e-13",
                        "Norm": "0.166553",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0",
                    "Module.layer3.0.conv2.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer3.0.relu.ReLU.backward.1": {
                "id": "Module.layer3.0.relu.ReLU.backward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.relu.ReLU.backward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.005283",
                        "Min": "-0.005217",
                        "Mean": "-5.361890e-07",
                        "Norm": "0.144125",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.relu.ReLU.backward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.005283",
                        "Min": "-0.005217",
                        "Mean": "-6.200127e-07",
                        "Norm": "0.20419",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0",
                    "Module.layer3.0.relu.ReLU.backward.1"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer3.0.bn1.BatchNorm2d.backward.0": {
                "id": "Module.layer3.0.bn1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.bn1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.005433",
                        "Min": "-0.005011",
                        "Mean": "0.0",
                        "Norm": "0.150797",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.bn1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.005283",
                        "Min": "-0.005217",
                        "Mean": "-5.361890e-07",
                        "Norm": "0.144125",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0",
                    "Module.layer3.0.bn1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer3.0.conv1.Conv2d.backward.0": {
                "id": "Module.layer3.0.conv1.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer3.0.conv1.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.003242",
                        "Min": "-0.002676",
                        "Mean": "1.208646e-08",
                        "Norm": "0.139735",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer3.0.conv1.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 256, 4, 4]",
                        "Max": "0.005433",
                        "Min": "-0.005011",
                        "Mean": "0.0",
                        "Norm": "0.150797",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer3.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer3.Sequential.backward.0",
                    "Module.layer3.0.BasicBlock.backward.0",
                    "Module.layer3.0.conv1.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer2.1.BasicBlock.backward.0": {
                "id": "Module.layer2.1.BasicBlock.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.BasicBlock.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.00595",
                        "Min": "-0.006032",
                        "Mean": "1.788464e-06",
                        "Norm": "0.2636",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.1.BasicBlock.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004368",
                        "Min": "-0.004748",
                        "Mean": "1.208646e-08",
                        "Norm": "0.188543",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.Sequential.backward.0",
                "subnodes": [
                    "Module.layer2.1.relu.ReLU.backward.0",
                    "Module.layer2.1.bn2.BatchNorm2d.backward.0",
                    "Module.layer2.1.conv2.Conv2d.backward.0",
                    "Module.layer2.1.relu.ReLU.backward.1",
                    "Module.layer2.1.bn1.BatchNorm2d.backward.0",
                    "Module.layer2.1.conv1.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.1.BasicBlock.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer2.1.relu.ReLU.backward.0": {
                "id": "Module.layer2.1.relu.ReLU.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.relu.ReLU.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004368",
                        "Min": "-0.004748",
                        "Mean": "6.662881e-07",
                        "Norm": "0.152697",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.1.relu.ReLU.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004368",
                        "Min": "-0.004748",
                        "Mean": "1.208646e-08",
                        "Norm": "0.188543",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.1.BasicBlock.backward.0",
                    "Module.layer2.1.relu.ReLU.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer2.Sequential.backward.0": {
                "id": "Module.layer2.Sequential.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.Sequential.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.003609",
                        "Min": "-0.005254",
                        "Mean": "-2.737119e-07",
                        "Norm": "0.226761",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.Sequential.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004368",
                        "Min": "-0.004748",
                        "Mean": "1.208646e-08",
                        "Norm": "0.188543",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [
                    "Module.layer2.1.BasicBlock.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.layer2.1.bn2.BatchNorm2d.backward.0": {
                "id": "Module.layer2.1.bn2.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.bn2.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.005537",
                        "Min": "-0.006419",
                        "Mean": "4.547474e-14",
                        "Norm": "0.192183",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.1.bn2.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004368",
                        "Min": "-0.004748",
                        "Mean": "6.662881e-07",
                        "Norm": "0.152697",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.1.BasicBlock.backward.0",
                    "Module.layer2.1.bn2.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer2.1.conv2.Conv2d.backward.0": {
                "id": "Module.layer2.1.conv2.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.conv2.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004543",
                        "Min": "-0.004991",
                        "Mean": "6.954823e-07",
                        "Norm": "0.250644",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.1.conv2.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.005537",
                        "Min": "-0.006419",
                        "Mean": "4.547474e-14",
                        "Norm": "0.192183",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.1.BasicBlock.backward.0",
                    "Module.layer2.1.conv2.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer2.1.relu.ReLU.backward.1": {
                "id": "Module.layer2.1.relu.ReLU.backward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.relu.ReLU.backward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004543",
                        "Min": "-0.004159",
                        "Mean": "2.355963e-06",
                        "Norm": "0.177588",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.1.relu.ReLU.backward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004543",
                        "Min": "-0.004991",
                        "Mean": "6.954823e-07",
                        "Norm": "0.250644",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.1.BasicBlock.backward.0",
                    "Module.layer2.1.relu.ReLU.backward.1"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer2.1.bn1.BatchNorm2d.backward.0": {
                "id": "Module.layer2.1.bn1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.bn1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004246",
                        "Min": "-0.003801",
                        "Mean": "3.865353e-13",
                        "Norm": "0.159253",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.1.bn1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004543",
                        "Min": "-0.004159",
                        "Mean": "2.355963e-06",
                        "Norm": "0.177588",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.1.BasicBlock.backward.0",
                    "Module.layer2.1.bn1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer2.1.conv1.Conv2d.backward.0": {
                "id": "Module.layer2.1.conv1.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.1.conv1.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.003947",
                        "Min": "-0.00409",
                        "Mean": "1.122175e-06",
                        "Norm": "0.213347",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.1.conv1.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004246",
                        "Min": "-0.003801",
                        "Mean": "3.865353e-13",
                        "Norm": "0.159253",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.1.BasicBlock.backward.0",
                    "Module.layer2.1.conv1.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer2.0.BasicBlock.backward.0": {
                "id": "Module.layer2.0.BasicBlock.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.BasicBlock.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.003609",
                        "Min": "-0.005254",
                        "Mean": "-2.737119e-07",
                        "Norm": "0.226761",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.BasicBlock.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.00595",
                        "Min": "-0.006032",
                        "Mean": "1.788464e-06",
                        "Norm": "0.2636",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.Sequential.backward.0",
                "subnodes": [
                    "Module.layer2.0.relu.ReLU.backward.0",
                    "Module.layer2.0.downsample.Sequential.backward.0",
                    "Module.layer2.0.bn2.BatchNorm2d.backward.0",
                    "Module.layer2.0.conv2.Conv2d.backward.0",
                    "Module.layer2.0.relu.ReLU.backward.1",
                    "Module.layer2.0.bn1.BatchNorm2d.backward.0",
                    "Module.layer2.0.conv1.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer2.0.relu.ReLU.backward.0": {
                "id": "Module.layer2.0.relu.ReLU.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.relu.ReLU.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.00595",
                        "Min": "-0.006032",
                        "Mean": "2.777311e-06",
                        "Norm": "0.192543",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.relu.ReLU.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.00595",
                        "Min": "-0.006032",
                        "Mean": "1.788464e-06",
                        "Norm": "0.2636",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0",
                    "Module.layer2.0.relu.ReLU.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer2.0.downsample.Sequential.backward.0": {
                "id": "Module.layer2.0.downsample.Sequential.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.downsample.Sequential.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.004066",
                        "Min": "-0.004851",
                        "Mean": "4.547474e-14",
                        "Norm": "0.148232",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.downsample.Sequential.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.00595",
                        "Min": "-0.006032",
                        "Mean": "2.777311e-06",
                        "Norm": "0.192543",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.backward.0",
                "subnodes": [
                    "Module.layer2.0.downsample.1.BatchNorm2d.backward.0",
                    "Module.layer2.0.downsample.0.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0",
                    "Module.layer2.0.downsample.Sequential.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer2.0.downsample.1.BatchNorm2d.backward.0": {
                "id": "Module.layer2.0.downsample.1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.downsample.1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004749",
                        "Min": "-0.004585",
                        "Mean": "-2.728484e-13",
                        "Norm": "0.14894",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.downsample.1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.00595",
                        "Min": "-0.006032",
                        "Mean": "2.777311e-06",
                        "Norm": "0.192543",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.0.downsample.Sequential.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0",
                    "Module.layer2.0.downsample.Sequential.backward.0",
                    "Module.layer2.0.downsample.1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer2.0.downsample.0.Conv2d.backward.0": {
                "id": "Module.layer2.0.downsample.0.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.downsample.0.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.004066",
                        "Min": "-0.004851",
                        "Mean": "4.547474e-14",
                        "Norm": "0.148232",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.downsample.0.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004749",
                        "Min": "-0.004585",
                        "Mean": "-2.728484e-13",
                        "Norm": "0.14894",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.0.downsample.Sequential.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0",
                    "Module.layer2.0.downsample.Sequential.backward.0",
                    "Module.layer2.0.downsample.0.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer2.0.bn2.BatchNorm2d.backward.0": {
                "id": "Module.layer2.0.bn2.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.bn2.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.00708",
                        "Min": "-0.008085",
                        "Mean": "-5.456968e-13",
                        "Norm": "0.246197",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.bn2.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.00595",
                        "Min": "-0.006032",
                        "Mean": "2.777311e-06",
                        "Norm": "0.192543",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0",
                    "Module.layer2.0.bn2.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer2.0.conv2.Conv2d.backward.0": {
                "id": "Module.layer2.0.conv2.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.conv2.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.005883",
                        "Min": "-0.005688",
                        "Mean": "7.895345e-07",
                        "Norm": "0.328498",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.conv2.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.00708",
                        "Min": "-0.008085",
                        "Mean": "-5.456968e-13",
                        "Norm": "0.246197",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0",
                    "Module.layer2.0.conv2.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer2.0.relu.ReLU.backward.1": {
                "id": "Module.layer2.0.relu.ReLU.backward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.relu.ReLU.backward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.005686",
                        "Min": "-0.005685",
                        "Mean": "1.743164e-06",
                        "Norm": "0.232839",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.relu.ReLU.backward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.005883",
                        "Min": "-0.005688",
                        "Mean": "7.895345e-07",
                        "Norm": "0.328498",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0",
                    "Module.layer2.0.relu.ReLU.backward.1"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer2.0.bn1.BatchNorm2d.backward.0": {
                "id": "Module.layer2.0.bn1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.bn1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004441",
                        "Min": "-0.004493",
                        "Mean": "-3.637979e-13",
                        "Norm": "0.176547",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.bn1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.005686",
                        "Min": "-0.005685",
                        "Mean": "1.743164e-06",
                        "Norm": "0.232839",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0",
                    "Module.layer2.0.bn1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer2.0.conv1.Conv2d.backward.0": {
                "id": "Module.layer2.0.conv1.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer2.0.conv1.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.002586",
                        "Min": "-0.002816",
                        "Mean": "-2.737123e-07",
                        "Norm": "0.171941",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer2.0.conv1.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 128, 8, 8]",
                        "Max": "0.004441",
                        "Min": "-0.004493",
                        "Mean": "-3.637979e-13",
                        "Norm": "0.176547",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer2.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer2.Sequential.backward.0",
                    "Module.layer2.0.BasicBlock.backward.0",
                    "Module.layer2.0.conv1.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer1.1.BasicBlock.backward.0": {
                "id": "Module.layer1.1.BasicBlock.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.BasicBlock.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.005186",
                        "Min": "-0.005365",
                        "Mean": "9.928035e-08",
                        "Norm": "0.311783",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.1.BasicBlock.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.003609",
                        "Min": "-0.005254",
                        "Mean": "-2.737119e-07",
                        "Norm": "0.226761",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.Sequential.backward.0",
                "subnodes": [
                    "Module.layer1.1.relu.ReLU.backward.0",
                    "Module.layer1.1.bn2.BatchNorm2d.backward.0",
                    "Module.layer1.1.conv2.Conv2d.backward.0",
                    "Module.layer1.1.relu.ReLU.backward.1",
                    "Module.layer1.1.bn1.BatchNorm2d.backward.0",
                    "Module.layer1.1.conv1.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.1.BasicBlock.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer1.1.relu.ReLU.backward.0": {
                "id": "Module.layer1.1.relu.ReLU.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.relu.ReLU.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.003609",
                        "Min": "-0.005254",
                        "Mean": "1.113839e-07",
                        "Norm": "0.209072",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.1.relu.ReLU.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.003609",
                        "Min": "-0.005254",
                        "Mean": "-2.737119e-07",
                        "Norm": "0.226761",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.1.BasicBlock.backward.0",
                    "Module.layer1.1.relu.ReLU.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer1.Sequential.backward.0": {
                "id": "Module.layer1.Sequential.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.Sequential.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.00901",
                        "Min": "-0.009858",
                        "Mean": "6.431268e-07",
                        "Norm": "0.614371",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.Sequential.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.003609",
                        "Min": "-0.005254",
                        "Mean": "-2.737119e-07",
                        "Norm": "0.226761",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [
                    "Module.layer1.1.BasicBlock.backward.0",
                    "Module.layer1.0.BasicBlock.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.layer1.1.bn2.BatchNorm2d.backward.0": {
                "id": "Module.layer1.1.bn2.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.bn2.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.004873",
                        "Min": "-0.006985",
                        "Mean": "6.366463e-13",
                        "Norm": "0.263476",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.1.bn2.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.003609",
                        "Min": "-0.005254",
                        "Mean": "1.113839e-07",
                        "Norm": "0.209072",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.1.BasicBlock.backward.0",
                    "Module.layer1.1.bn2.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer1.1.conv2.Conv2d.backward.0": {
                "id": "Module.layer1.1.conv2.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.conv2.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.005249",
                        "Min": "-0.005144",
                        "Mean": "5.896727e-08",
                        "Norm": "0.36269",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.1.conv2.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.004873",
                        "Min": "-0.006985",
                        "Mean": "6.366463e-13",
                        "Norm": "0.263476",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.1.BasicBlock.backward.0",
                    "Module.layer1.1.conv2.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer1.1.relu.ReLU.backward.1": {
                "id": "Module.layer1.1.relu.ReLU.backward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.relu.ReLU.backward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.005249",
                        "Min": "-0.004949",
                        "Mean": "-2.247479e-07",
                        "Norm": "0.255762",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.1.relu.ReLU.backward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.005249",
                        "Min": "-0.005144",
                        "Mean": "5.896727e-08",
                        "Norm": "0.36269",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.1.BasicBlock.backward.0",
                    "Module.layer1.1.relu.ReLU.backward.1"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer1.1.bn1.BatchNorm2d.backward.0": {
                "id": "Module.layer1.1.bn1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.bn1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.00343",
                        "Min": "-0.003328",
                        "Mean": "1.818989e-13",
                        "Norm": "0.165887",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.1.bn1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.005249",
                        "Min": "-0.004949",
                        "Mean": "-2.247479e-07",
                        "Norm": "0.255762",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.1.BasicBlock.backward.0",
                    "Module.layer1.1.bn1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer1.1.conv1.Conv2d.backward.0": {
                "id": "Module.layer1.1.conv1.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.1.conv1.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.003166",
                        "Min": "-0.003639",
                        "Mean": "-1.210342e-08",
                        "Norm": "0.229291",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.1.conv1.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.00343",
                        "Min": "-0.003328",
                        "Mean": "1.818989e-13",
                        "Norm": "0.165887",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.1.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.1.BasicBlock.backward.0",
                    "Module.layer1.1.conv1.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer1.0.BasicBlock.backward.0": {
                "id": "Module.layer1.0.BasicBlock.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.BasicBlock.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.00901",
                        "Min": "-0.009858",
                        "Mean": "6.431268e-07",
                        "Norm": "0.614371",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.0.BasicBlock.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.005186",
                        "Min": "-0.005365",
                        "Mean": "9.928035e-08",
                        "Norm": "0.311783",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.Sequential.backward.0",
                "subnodes": [
                    "Module.layer1.0.relu.ReLU.backward.0",
                    "Module.layer1.0.bn2.BatchNorm2d.backward.0",
                    "Module.layer1.0.conv2.Conv2d.backward.0",
                    "Module.layer1.0.relu.ReLU.backward.1",
                    "Module.layer1.0.bn1.BatchNorm2d.backward.0",
                    "Module.layer1.0.conv1.Conv2d.backward.0"
                ],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.0.BasicBlock.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer1.0.relu.ReLU.backward.0": {
                "id": "Module.layer1.0.relu.ReLU.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.relu.ReLU.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.005186",
                        "Min": "-0.005365",
                        "Mean": "3.088644e-07",
                        "Norm": "0.299243",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.0.relu.ReLU.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.005186",
                        "Min": "-0.005365",
                        "Mean": "9.928035e-08",
                        "Norm": "0.311783",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.0.BasicBlock.backward.0",
                    "Module.layer1.0.relu.ReLU.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer1.0.bn2.BatchNorm2d.backward.0": {
                "id": "Module.layer1.0.bn2.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.bn2.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.007243",
                        "Min": "-0.006519",
                        "Mean": "-7.275958e-13",
                        "Norm": "0.389929",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.0.bn2.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.005186",
                        "Min": "-0.005365",
                        "Mean": "3.088644e-07",
                        "Norm": "0.299243",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.0.BasicBlock.backward.0",
                    "Module.layer1.0.bn2.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer1.0.conv2.Conv2d.backward.0": {
                "id": "Module.layer1.0.conv2.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.conv2.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.007983",
                        "Min": "-0.00772",
                        "Mean": "-5.936339e-07",
                        "Norm": "0.54013",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.0.conv2.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.007243",
                        "Min": "-0.006519",
                        "Mean": "-7.275958e-13",
                        "Norm": "0.389929",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.0.BasicBlock.backward.0",
                    "Module.layer1.0.conv2.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer1.0.relu.ReLU.backward.1": {
                "id": "Module.layer1.0.relu.ReLU.backward.1",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.relu.ReLU.backward.1.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.007983",
                        "Min": "-0.00772",
                        "Mean": "2.777797e-07",
                        "Norm": "0.379333",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.0.relu.ReLU.backward.1.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.007983",
                        "Min": "-0.00772",
                        "Mean": "-5.936339e-07",
                        "Norm": "0.54013",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.0.BasicBlock.backward.0",
                    "Module.layer1.0.relu.ReLU.backward.1"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer1.0.bn1.BatchNorm2d.backward.0": {
                "id": "Module.layer1.0.bn1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.bn1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.009111",
                        "Min": "-0.009193",
                        "Mean": "-7.275958e-13",
                        "Norm": "0.387683",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.0.bn1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.007983",
                        "Min": "-0.00772",
                        "Mean": "2.777797e-07",
                        "Norm": "0.379333",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.0.BasicBlock.backward.0",
                    "Module.layer1.0.bn1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.layer1.0.conv1.Conv2d.backward.0": {
                "id": "Module.layer1.0.conv1.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.layer1.0.conv1.Conv2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.007328",
                        "Min": "-0.008206",
                        "Mean": "3.342619e-07",
                        "Norm": "0.538403",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.layer1.0.conv1.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.009111",
                        "Min": "-0.009193",
                        "Mean": "-7.275958e-13",
                        "Norm": "0.387683",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "Module.layer1.0.BasicBlock.backward.0",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.layer1.Sequential.backward.0",
                    "Module.layer1.0.BasicBlock.backward.0",
                    "Module.layer1.0.conv1.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "data": {}
            },
            "Module.maxpool.MaxPool2d.backward.0": {
                "id": "Module.maxpool.MaxPool2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.maxpool.MaxPool2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "0.01485",
                        "Min": "-0.019076",
                        "Mean": "1.607818e-07",
                        "Norm": "0.615501",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.maxpool.MaxPool2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 16, 16]",
                        "Max": "0.00901",
                        "Min": "-0.009858",
                        "Mean": "6.431268e-07",
                        "Norm": "0.614371",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.maxpool.MaxPool2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.relu.ReLU.backward.0": {
                "id": "Module.relu.ReLU.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.relu.ReLU.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "0.01485",
                        "Min": "-0.019076",
                        "Mean": "1.113458e-07",
                        "Norm": "0.614639",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.relu.ReLU.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "0.01485",
                        "Min": "-0.019076",
                        "Mean": "1.607818e-07",
                        "Norm": "0.615501",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.relu.ReLU.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.bn1.BatchNorm2d.backward.0": {
                "id": "Module.bn1.BatchNorm2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.bn1.BatchNorm2d.backward.0.output.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "0.049808",
                        "Min": "-0.064687",
                        "Mean": "1.364242e-12",
                        "Norm": "2.04307",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "input_data": {
                    "Module.bn1.BatchNorm2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "0.01485",
                        "Min": "-0.019076",
                        "Mean": "1.113458e-07",
                        "Norm": "0.614639",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.bn1.BatchNorm2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {}
            },
            "Module.conv1.Conv2d.backward.0": {
                "id": "Module.conv1.Conv2d.backward.0",
                "node_type": 0,
                "output_data": {
                    "Module.conv1.Conv2d.backward.0.output.0": {
                        "value": "null"
                    }
                },
                "input_data": {
                    "Module.conv1.Conv2d.backward.0.input.0": {
                        "type": "torch.Tensor",
                        "dtype": "torch.float32",
                        "shape": "[10, 64, 32, 32]",
                        "Max": "0.049808",
                        "Min": "-0.064687",
                        "Mean": "1.364242e-12",
                        "Norm": "2.04307",
                        "data_name": "-1",
                        "md5": "00000000"
                    }
                },
                "upnode": "DefaultModel",
                "subnodes": [],
                "matched_node_link": [
                    "DefaultModel",
                    "Module.conv1.Conv2d.backward.0"
                ],
                "suggestions": {},
                "stack_info": [],
                "micro_step_id": 0,
                "data": {}
            }
        }
    },
    "ToolTip": "{\"Max diff\": \"NPU\\u4e0e\\u6807\\u6746API\\u7edf\\u8ba1\\u4fe1\\u606f\\u6bd4\\u5bf9\\uff0c\\u6700\\u5927\\u503c\\u7684\\u5dee\\u503c\", \"Min diff\": \"NPU\\u4e0e\\u6807\\u6746API\\u7edf\\u8ba1\\u4fe1\\u606f\\u6bd4\\u5bf9\\uff0c\\u6700\\u5c0f\\u503c\\u7684\\u5dee\\u503c\", \"Mean diff\": \"NPU\\u4e0e\\u6807\\u6746API\\u7edf\\u8ba1\\u4fe1\\u606f\\u6bd4\\u5bf9\\uff0c\\u5e73\\u5747\\u503c\\u7684\\u5dee\\u503c\", \"L2norm diff\": \"NPU\\u4e0e\\u6807\\u6746API\\u7edf\\u8ba1\\u4fe1\\u606f\\u6bd4\\u5bf9\\uff0c2\\u8303\\u6570\\uff08\\u5e73\\u65b9\\u6839\\uff09\\u7684\\u5dee\\u503c\"}",
    "Colors": {
        "#FFFCF3": {
            "value": [
                0,
                0.2
            ],
            "description": "此节点所有输入输出的统计量相对误差, 值越大代表测量值与标杆值的偏差越大, 相对误差计算方式:|(测量值-标杆值)/标杆值|"
        },
        "#FFEDBE": {
            "value": [
                0.2,
                0.4
            ],
            "description": "此节点所有输入输出的统计量相对误差, 值越大代表测量值与标杆值的偏差越大, 相对误差计算方式:|(测量值-标杆值)/标杆值|"
        },
        "#FFDC7F": {
            "value": [
                0.4,
                0.6
            ],
            "description": "此节点所有输入输出的统计量相对误差, 值越大代表测量值与标杆值的偏差越大, 相对误差计算方式:|(测量值-标杆值)/标杆值|"
        },
        "#FFC62E": {
            "value": [
                0.6,
                0.8
            ],
            "description": "此节点所有输入输出的统计量相对误差, 值越大代表测量值与标杆值的偏差越大, 相对误差计算方式:|(测量值-标杆值)/标杆值|"
        },
        "#FF704D": {
            "value": [
                0.8,
                1
            ],
            "description": "此节点所有输入输出的统计量相对误差, 值越大代表测量值与标杆值的偏差越大, 相对误差计算方式:|(测量值-标杆值)/标杆值|"
        },
        "#C7C7C7": {
            "value": [],
            "description": "比对过程中节点未匹配上"
        }
    },
    "MicroSteps": 1,
    "task": "summary",
    "npu_match_nodes": {
        "DefaultModel": "DefaultModel",
        "Module.conv1.Conv2d.forward.0": "Module.conv1.Conv2d.forward.0",
        "Module.bn1.BatchNorm2d.forward.0": "Module.bn1.BatchNorm2d.forward.0",
        "Module.relu.ReLU.forward.0": "Module.relu.ReLU.forward.0",
        "Module.maxpool.MaxPool2d.forward.0": "Module.maxpool.MaxPool2d.forward.0",
        "Module.layer1.0.BasicBlock.forward.0": "Module.layer1.0.BasicBlock.forward.0",
        "Module.layer1.0.conv1.Conv2d.forward.0": "Module.layer1.0.conv1.Conv2d.forward.0",
        "Module.layer1.Sequential.forward.0": "Module.layer1.Sequential.forward.0",
        "Module.layer1.0.bn1.BatchNorm2d.forward.0": "Module.layer1.0.bn1.BatchNorm2d.forward.0",
        "Module.layer1.0.relu.ReLU.forward.0": "Module.layer1.0.relu.ReLU.forward.0",
        "Module.layer1.0.conv2.Conv2d.forward.0": "Module.layer1.0.conv2.Conv2d.forward.0",
        "Module.layer1.0.bn2.BatchNorm2d.forward.0": "Module.layer1.0.bn2.BatchNorm2d.forward.0",
        "Module.layer1.0.relu.ReLU.forward.1": "Module.layer1.0.relu.ReLU.forward.1",
        "Module.layer1.1.BasicBlock.forward.0": "Module.layer1.1.BasicBlock.forward.0",
        "Module.layer1.1.conv1.Conv2d.forward.0": "Module.layer1.1.conv1.Conv2d.forward.0",
        "Module.layer1.1.bn1.BatchNorm2d.forward.0": "Module.layer1.1.bn1.BatchNorm2d.forward.0",
        "Module.layer1.1.relu.ReLU.forward.0": "Module.layer1.1.relu.ReLU.forward.0",
        "Module.layer1.1.conv2.Conv2d.forward.0": "Module.layer1.1.conv2.Conv2d.forward.0",
        "Module.layer1.1.bn2.BatchNorm2d.forward.0": "Module.layer1.1.bn2.BatchNorm2d.forward.0",
        "Module.layer1.1.relu.ReLU.forward.1": "Module.layer1.1.relu.ReLU.forward.1",
        "Module.layer2.0.BasicBlock.forward.0": "Module.layer2.0.BasicBlock.forward.0",
        "Module.layer2.0.conv1.Conv2d.forward.0": "Module.layer2.0.conv1.Conv2d.forward.0",
        "Module.layer2.Sequential.forward.0": "Module.layer2.Sequential.forward.0",
        "Module.layer2.0.bn1.BatchNorm2d.forward.0": "Module.layer2.0.bn1.BatchNorm2d.forward.0",
        "Module.layer2.0.relu.ReLU.forward.0": "Module.layer2.0.relu.ReLU.forward.0",
        "Module.layer2.0.conv2.Conv2d.forward.0": "Module.layer2.0.conv2.Conv2d.forward.0",
        "Module.layer2.0.bn2.BatchNorm2d.forward.0": "Module.layer2.0.bn2.BatchNorm2d.forward.0",
        "Module.layer2.0.downsample.Sequential.forward.0": "Module.layer2.0.downsample.Sequential.forward.0",
        "Module.layer2.0.downsample.0.Conv2d.forward.0": "Module.layer2.0.downsample.0.Conv2d.forward.0",
        "Module.layer2.0.downsample.1.BatchNorm2d.forward.0": "Module.layer2.0.downsample.1.BatchNorm2d.forward.0",
        "Module.layer2.0.relu.ReLU.forward.1": "Module.layer2.0.relu.ReLU.forward.1",
        "Module.layer2.1.BasicBlock.forward.0": "Module.layer2.1.BasicBlock.forward.0",
        "Module.layer2.1.conv1.Conv2d.forward.0": "Module.layer2.1.conv1.Conv2d.forward.0",
        "Module.layer2.1.bn1.BatchNorm2d.forward.0": "Module.layer2.1.bn1.BatchNorm2d.forward.0",
        "Module.layer2.1.relu.ReLU.forward.0": "Module.layer2.1.relu.ReLU.forward.0",
        "Module.layer2.1.conv2.Conv2d.forward.0": "Module.layer2.1.conv2.Conv2d.forward.0",
        "Module.layer2.1.bn2.BatchNorm2d.forward.0": "Module.layer2.1.bn2.BatchNorm2d.forward.0",
        "Module.layer2.1.relu.ReLU.forward.1": "Module.layer2.1.relu.ReLU.forward.1",
        "Module.layer3.0.BasicBlock.forward.0": "Module.layer3.0.BasicBlock.forward.0",
        "Module.layer3.0.conv1.Conv2d.forward.0": "Module.layer3.0.conv1.Conv2d.forward.0",
        "Module.layer3.Sequential.forward.0": "Module.layer3.Sequential.forward.0",
        "Module.layer3.0.bn1.BatchNorm2d.forward.0": "Module.layer3.0.bn1.BatchNorm2d.forward.0",
        "Module.layer3.0.relu.ReLU.forward.0": "Module.layer3.0.relu.ReLU.forward.0",
        "Module.layer3.0.conv2.Conv2d.forward.0": "Module.layer3.0.conv2.Conv2d.forward.0",
        "Module.layer3.0.bn2.BatchNorm2d.forward.0": "Module.layer3.0.bn2.BatchNorm2d.forward.0",
        "Module.layer3.0.downsample.Sequential.forward.0": "Module.layer3.0.downsample.Sequential.forward.0",
        "Module.layer3.0.downsample.0.Conv2d.forward.0": "Module.layer3.0.downsample.0.Conv2d.forward.0",
        "Module.layer3.0.downsample.1.BatchNorm2d.forward.0": "Module.layer3.0.downsample.1.BatchNorm2d.forward.0",
        "Module.layer3.0.relu.ReLU.forward.1": "Module.layer3.0.relu.ReLU.forward.1",
        "Module.layer3.1.BasicBlock.forward.0": "Module.layer3.1.BasicBlock.forward.0",
        "Module.layer3.1.conv1.Conv2d.forward.0": "Module.layer3.1.conv1.Conv2d.forward.0",
        "Module.layer3.1.bn1.BatchNorm2d.forward.0": "Module.layer3.1.bn1.BatchNorm2d.forward.0",
        "Module.layer3.1.relu.ReLU.forward.0": "Module.layer3.1.relu.ReLU.forward.0",
        "Module.layer3.1.conv2.Conv2d.forward.0": "Module.layer3.1.conv2.Conv2d.forward.0",
        "Module.layer3.1.bn2.BatchNorm2d.forward.0": "Module.layer3.1.bn2.BatchNorm2d.forward.0",
        "Module.layer3.1.relu.ReLU.forward.1": "Module.layer3.1.relu.ReLU.forward.1",
        "Module.layer4.0.BasicBlock.forward.0": "Module.layer4.0.BasicBlock.forward.0",
        "Module.layer4.0.conv1.Conv2d.forward.0": "Module.layer4.0.conv1.Conv2d.forward.0",
        "Module.layer4.Sequential.forward.0": "Module.layer4.Sequential.forward.0",
        "Module.layer4.0.bn1.BatchNorm2d.forward.0": "Module.layer4.0.bn1.BatchNorm2d.forward.0",
        "Module.layer4.0.relu.ReLU.forward.0": "Module.layer4.0.relu.ReLU.forward.0",
        "Module.layer4.0.conv2.Conv2d.forward.0": "Module.layer4.0.conv2.Conv2d.forward.0",
        "Module.layer4.0.bn2.BatchNorm2d.forward.0": "Module.layer4.0.bn2.BatchNorm2d.forward.0",
        "Module.layer4.0.downsample.Sequential.forward.0": "Module.layer4.0.downsample.Sequential.forward.0",
        "Module.layer4.0.downsample.0.Conv2d.forward.0": "Module.layer4.0.downsample.0.Conv2d.forward.0",
        "Module.layer4.0.downsample.1.BatchNorm2d.forward.0": "Module.layer4.0.downsample.1.BatchNorm2d.forward.0",
        "Module.layer4.0.relu.ReLU.forward.1": "Module.layer4.0.relu.ReLU.forward.1",
        "Module.layer4.1.BasicBlock.forward.0": "Module.layer4.1.BasicBlock.forward.0",
        "Module.layer4.1.conv1.Conv2d.forward.0": "Module.layer4.1.conv1.Conv2d.forward.0",
        "Module.layer4.1.bn1.BatchNorm2d.forward.0": "Module.layer4.1.bn1.BatchNorm2d.forward.0",
        "Module.layer4.1.relu.ReLU.forward.0": "Module.layer4.1.relu.ReLU.forward.0",
        "Module.layer4.1.conv2.Conv2d.forward.0": "Module.layer4.1.conv2.Conv2d.forward.0",
        "Module.layer4.1.bn2.BatchNorm2d.forward.0": "Module.layer4.1.bn2.BatchNorm2d.forward.0",
        "Module.layer4.1.relu.ReLU.forward.1": "Module.layer4.1.relu.ReLU.forward.1",
        "Module.avgpool.AdaptiveAvgPool2d.forward.0": "Module.avgpool.AdaptiveAvgPool2d.forward.0",
        "Module.avgpool.AdaptiveAvgPool2d.backward.0": "Module.avgpool.AdaptiveAvgPool2d.backward.0",
        "Module.layer4.1.BasicBlock.backward.0": "Module.layer4.1.BasicBlock.backward.0",
        "Module.layer4.1.relu.ReLU.backward.0": "Module.layer4.1.relu.ReLU.backward.0",
        "Module.layer4.Sequential.backward.0": "Module.layer4.Sequential.backward.0",
        "Module.layer4.1.bn2.BatchNorm2d.backward.0": "Module.layer4.1.bn2.BatchNorm2d.backward.0",
        "Module.layer4.1.conv2.Conv2d.backward.0": "Module.layer4.1.conv2.Conv2d.backward.0",
        "Module.layer4.1.relu.ReLU.backward.1": "Module.layer4.1.relu.ReLU.backward.1",
        "Module.layer4.1.bn1.BatchNorm2d.backward.0": "Module.layer4.1.bn1.BatchNorm2d.backward.0",
        "Module.layer4.1.conv1.Conv2d.backward.0": "Module.layer4.1.conv1.Conv2d.backward.0",
        "Module.layer4.0.BasicBlock.backward.0": "Module.layer4.0.BasicBlock.backward.0",
        "Module.layer4.0.relu.ReLU.backward.0": "Module.layer4.0.relu.ReLU.backward.0",
        "Module.layer4.0.downsample.Sequential.backward.0": "Module.layer4.0.downsample.Sequential.backward.0",
        "Module.layer4.0.downsample.1.BatchNorm2d.backward.0": "Module.layer4.0.downsample.1.BatchNorm2d.backward.0",
        "Module.layer4.0.downsample.0.Conv2d.backward.0": "Module.layer4.0.downsample.0.Conv2d.backward.0",
        "Module.layer4.0.bn2.BatchNorm2d.backward.0": "Module.layer4.0.bn2.BatchNorm2d.backward.0",
        "Module.layer4.0.conv2.Conv2d.backward.0": "Module.layer4.0.conv2.Conv2d.backward.0",
        "Module.layer4.0.relu.ReLU.backward.1": "Module.layer4.0.relu.ReLU.backward.1",
        "Module.layer4.0.bn1.BatchNorm2d.backward.0": "Module.layer4.0.bn1.BatchNorm2d.backward.0",
        "Module.layer4.0.conv1.Conv2d.backward.0": "Module.layer4.0.conv1.Conv2d.backward.0",
        "Module.layer3.1.BasicBlock.backward.0": "Module.layer3.1.BasicBlock.backward.0",
        "Module.layer3.1.relu.ReLU.backward.0": "Module.layer3.1.relu.ReLU.backward.0",
        "Module.layer3.Sequential.backward.0": "Module.layer3.Sequential.backward.0",
        "Module.layer3.1.bn2.BatchNorm2d.backward.0": "Module.layer3.1.bn2.BatchNorm2d.backward.0",
        "Module.layer3.1.conv2.Conv2d.backward.0": "Module.layer3.1.conv2.Conv2d.backward.0",
        "Module.layer3.1.relu.ReLU.backward.1": "Module.layer3.1.relu.ReLU.backward.1",
        "Module.layer3.1.bn1.BatchNorm2d.backward.0": "Module.layer3.1.bn1.BatchNorm2d.backward.0",
        "Module.layer3.1.conv1.Conv2d.backward.0": "Module.layer3.1.conv1.Conv2d.backward.0",
        "Module.layer3.0.BasicBlock.backward.0": "Module.layer3.0.BasicBlock.backward.0",
        "Module.layer3.0.relu.ReLU.backward.0": "Module.layer3.0.relu.ReLU.backward.0",
        "Module.layer3.0.downsample.Sequential.backward.0": "Module.layer3.0.downsample.Sequential.backward.0",
        "Module.layer3.0.downsample.1.BatchNorm2d.backward.0": "Module.layer3.0.downsample.1.BatchNorm2d.backward.0",
        "Module.layer3.0.downsample.0.Conv2d.backward.0": "Module.layer3.0.downsample.0.Conv2d.backward.0",
        "Module.layer3.0.bn2.BatchNorm2d.backward.0": "Module.layer3.0.bn2.BatchNorm2d.backward.0",
        "Module.layer3.0.conv2.Conv2d.backward.0": "Module.layer3.0.conv2.Conv2d.backward.0",
        "Module.layer3.0.relu.ReLU.backward.1": "Module.layer3.0.relu.ReLU.backward.1",
        "Module.layer3.0.bn1.BatchNorm2d.backward.0": "Module.layer3.0.bn1.BatchNorm2d.backward.0",
        "Module.layer3.0.conv1.Conv2d.backward.0": "Module.layer3.0.conv1.Conv2d.backward.0",
        "Module.layer2.1.BasicBlock.backward.0": "Module.layer2.1.BasicBlock.backward.0",
        "Module.layer2.1.relu.ReLU.backward.0": "Module.layer2.1.relu.ReLU.backward.0",
        "Module.layer2.Sequential.backward.0": "Module.layer2.Sequential.backward.0",
        "Module.layer2.1.bn2.BatchNorm2d.backward.0": "Module.layer2.1.bn2.BatchNorm2d.backward.0",
        "Module.layer2.1.conv2.Conv2d.backward.0": "Module.layer2.1.conv2.Conv2d.backward.0",
        "Module.layer2.1.relu.ReLU.backward.1": "Module.layer2.1.relu.ReLU.backward.1",
        "Module.layer2.1.bn1.BatchNorm2d.backward.0": "Module.layer2.1.bn1.BatchNorm2d.backward.0",
        "Module.layer2.1.conv1.Conv2d.backward.0": "Module.layer2.1.conv1.Conv2d.backward.0",
        "Module.layer2.0.BasicBlock.backward.0": "Module.layer2.0.BasicBlock.backward.0",
        "Module.layer2.0.relu.ReLU.backward.0": "Module.layer2.0.relu.ReLU.backward.0",
        "Module.layer2.0.downsample.Sequential.backward.0": "Module.layer2.0.downsample.Sequential.backward.0",
        "Module.layer2.0.downsample.1.BatchNorm2d.backward.0": "Module.layer2.0.downsample.1.BatchNorm2d.backward.0",
        "Module.layer2.0.downsample.0.Conv2d.backward.0": "Module.layer2.0.downsample.0.Conv2d.backward.0",
        "Module.layer2.0.bn2.BatchNorm2d.backward.0": "Module.layer2.0.bn2.BatchNorm2d.backward.0",
        "Module.layer2.0.conv2.Conv2d.backward.0": "Module.layer2.0.conv2.Conv2d.backward.0",
        "Module.layer2.0.relu.ReLU.backward.1": "Module.layer2.0.relu.ReLU.backward.1",
        "Module.layer2.0.bn1.BatchNorm2d.backward.0": "Module.layer2.0.bn1.BatchNorm2d.backward.0",
        "Module.layer2.0.conv1.Conv2d.backward.0": "Module.layer2.0.conv1.Conv2d.backward.0",
        "Module.layer1.1.BasicBlock.backward.0": "Module.layer1.1.BasicBlock.backward.0",
        "Module.layer1.1.relu.ReLU.backward.0": "Module.layer1.1.relu.ReLU.backward.0",
        "Module.layer1.Sequential.backward.0": "Module.layer1.Sequential.backward.0",
        "Module.layer1.1.bn2.BatchNorm2d.backward.0": "Module.layer1.1.bn2.BatchNorm2d.backward.0",
        "Module.layer1.1.conv2.Conv2d.backward.0": "Module.layer1.1.conv2.Conv2d.backward.0",
        "Module.layer1.1.relu.ReLU.backward.1": "Module.layer1.1.relu.ReLU.backward.1",
        "Module.layer1.1.bn1.BatchNorm2d.backward.0": "Module.layer1.1.bn1.BatchNorm2d.backward.0",
        "Module.layer1.1.conv1.Conv2d.backward.0": "Module.layer1.1.conv1.Conv2d.backward.0",
        "Module.layer1.0.BasicBlock.backward.0": "Module.layer1.0.BasicBlock.backward.0",
        "Module.layer1.0.relu.ReLU.backward.0": "Module.layer1.0.relu.ReLU.backward.0",
        "Module.layer1.0.bn2.BatchNorm2d.backward.0": "Module.layer1.0.bn2.BatchNorm2d.backward.0",
        "Module.layer1.0.conv2.Conv2d.backward.0": "Module.layer1.0.conv2.Conv2d.backward.0",
        "Module.layer1.0.relu.ReLU.backward.1": "Module.layer1.0.relu.ReLU.backward.1",
        "Module.layer1.0.bn1.BatchNorm2d.backward.0": "Module.layer1.0.bn1.BatchNorm2d.backward.0",
        "Module.layer1.0.conv1.Conv2d.backward.0": "Module.layer1.0.conv1.Conv2d.backward.0",
        "Module.maxpool.MaxPool2d.backward.0": "Module.maxpool.MaxPool2d.backward.0",
        "Module.relu.ReLU.backward.0": "Module.relu.ReLU.backward.0",
        "Module.bn1.BatchNorm2d.backward.0": "Module.bn1.BatchNorm2d.backward.0",
        "Module.conv1.Conv2d.backward.0": "Module.conv1.Conv2d.backward.0"
    },
    "bench_match_nodes": {
        "DefaultModel": "DefaultModel",
        "Module.conv1.Conv2d.forward.0": "Module.conv1.Conv2d.forward.0",
        "Module.bn1.BatchNorm2d.forward.0": "Module.bn1.BatchNorm2d.forward.0",
        "Module.relu.ReLU.forward.0": "Module.relu.ReLU.forward.0",
        "Module.maxpool.MaxPool2d.forward.0": "Module.maxpool.MaxPool2d.forward.0",
        "Module.layer1.0.BasicBlock.forward.0": "Module.layer1.0.BasicBlock.forward.0",
        "Module.layer1.0.conv1.Conv2d.forward.0": "Module.layer1.0.conv1.Conv2d.forward.0",
        "Module.layer1.Sequential.forward.0": "Module.layer1.Sequential.forward.0",
        "Module.layer1.0.bn1.BatchNorm2d.forward.0": "Module.layer1.0.bn1.BatchNorm2d.forward.0",
        "Module.layer1.0.relu.ReLU.forward.0": "Module.layer1.0.relu.ReLU.forward.0",
        "Module.layer1.0.conv2.Conv2d.forward.0": "Module.layer1.0.conv2.Conv2d.forward.0",
        "Module.layer1.0.bn2.BatchNorm2d.forward.0": "Module.layer1.0.bn2.BatchNorm2d.forward.0",
        "Module.layer1.0.relu.ReLU.forward.1": "Module.layer1.0.relu.ReLU.forward.1",
        "Module.layer1.1.BasicBlock.forward.0": "Module.layer1.1.BasicBlock.forward.0",
        "Module.layer1.1.conv1.Conv2d.forward.0": "Module.layer1.1.conv1.Conv2d.forward.0",
        "Module.layer1.1.bn1.BatchNorm2d.forward.0": "Module.layer1.1.bn1.BatchNorm2d.forward.0",
        "Module.layer1.1.relu.ReLU.forward.0": "Module.layer1.1.relu.ReLU.forward.0",
        "Module.layer1.1.conv2.Conv2d.forward.0": "Module.layer1.1.conv2.Conv2d.forward.0",
        "Module.layer1.1.bn2.BatchNorm2d.forward.0": "Module.layer1.1.bn2.BatchNorm2d.forward.0",
        "Module.layer1.1.relu.ReLU.forward.1": "Module.layer1.1.relu.ReLU.forward.1",
        "Module.layer2.0.BasicBlock.forward.0": "Module.layer2.0.BasicBlock.forward.0",
        "Module.layer2.0.conv1.Conv2d.forward.0": "Module.layer2.0.conv1.Conv2d.forward.0",
        "Module.layer2.Sequential.forward.0": "Module.layer2.Sequential.forward.0",
        "Module.layer2.0.bn1.BatchNorm2d.forward.0": "Module.layer2.0.bn1.BatchNorm2d.forward.0",
        "Module.layer2.0.relu.ReLU.forward.0": "Module.layer2.0.relu.ReLU.forward.0",
        "Module.layer2.0.conv2.Conv2d.forward.0": "Module.layer2.0.conv2.Conv2d.forward.0",
        "Module.layer2.0.bn2.BatchNorm2d.forward.0": "Module.layer2.0.bn2.BatchNorm2d.forward.0",
        "Module.layer2.0.downsample.Sequential.forward.0": "Module.layer2.0.downsample.Sequential.forward.0",
        "Module.layer2.0.downsample.0.Conv2d.forward.0": "Module.layer2.0.downsample.0.Conv2d.forward.0",
        "Module.layer2.0.downsample.1.BatchNorm2d.forward.0": "Module.layer2.0.downsample.1.BatchNorm2d.forward.0",
        "Module.layer2.0.relu.ReLU.forward.1": "Module.layer2.0.relu.ReLU.forward.1",
        "Module.layer2.1.BasicBlock.forward.0": "Module.layer2.1.BasicBlock.forward.0",
        "Module.layer2.1.conv1.Conv2d.forward.0": "Module.layer2.1.conv1.Conv2d.forward.0",
        "Module.layer2.1.bn1.BatchNorm2d.forward.0": "Module.layer2.1.bn1.BatchNorm2d.forward.0",
        "Module.layer2.1.relu.ReLU.forward.0": "Module.layer2.1.relu.ReLU.forward.0",
        "Module.layer2.1.conv2.Conv2d.forward.0": "Module.layer2.1.conv2.Conv2d.forward.0",
        "Module.layer2.1.bn2.BatchNorm2d.forward.0": "Module.layer2.1.bn2.BatchNorm2d.forward.0",
        "Module.layer2.1.relu.ReLU.forward.1": "Module.layer2.1.relu.ReLU.forward.1",
        "Module.layer3.0.BasicBlock.forward.0": "Module.layer3.0.BasicBlock.forward.0",
        "Module.layer3.0.conv1.Conv2d.forward.0": "Module.layer3.0.conv1.Conv2d.forward.0",
        "Module.layer3.Sequential.forward.0": "Module.layer3.Sequential.forward.0",
        "Module.layer3.0.bn1.BatchNorm2d.forward.0": "Module.layer3.0.bn1.BatchNorm2d.forward.0",
        "Module.layer3.0.relu.ReLU.forward.0": "Module.layer3.0.relu.ReLU.forward.0",
        "Module.layer3.0.conv2.Conv2d.forward.0": "Module.layer3.0.conv2.Conv2d.forward.0",
        "Module.layer3.0.bn2.BatchNorm2d.forward.0": "Module.layer3.0.bn2.BatchNorm2d.forward.0",
        "Module.layer3.0.downsample.Sequential.forward.0": "Module.layer3.0.downsample.Sequential.forward.0",
        "Module.layer3.0.downsample.0.Conv2d.forward.0": "Module.layer3.0.downsample.0.Conv2d.forward.0",
        "Module.layer3.0.downsample.1.BatchNorm2d.forward.0": "Module.layer3.0.downsample.1.BatchNorm2d.forward.0",
        "Module.layer3.0.relu.ReLU.forward.1": "Module.layer3.0.relu.ReLU.forward.1",
        "Module.layer3.1.BasicBlock.forward.0": "Module.layer3.1.BasicBlock.forward.0",
        "Module.layer3.1.conv1.Conv2d.forward.0": "Module.layer3.1.conv1.Conv2d.forward.0",
        "Module.layer3.1.bn1.BatchNorm2d.forward.0": "Module.layer3.1.bn1.BatchNorm2d.forward.0",
        "Module.layer3.1.relu.ReLU.forward.0": "Module.layer3.1.relu.ReLU.forward.0",
        "Module.layer3.1.conv2.Conv2d.forward.0": "Module.layer3.1.conv2.Conv2d.forward.0",
        "Module.layer3.1.bn2.BatchNorm2d.forward.0": "Module.layer3.1.bn2.BatchNorm2d.forward.0",
        "Module.layer3.1.relu.ReLU.forward.1": "Module.layer3.1.relu.ReLU.forward.1",
        "Module.layer4.0.BasicBlock.forward.0": "Module.layer4.0.BasicBlock.forward.0",
        "Module.layer4.0.conv1.Conv2d.forward.0": "Module.layer4.0.conv1.Conv2d.forward.0",
        "Module.layer4.Sequential.forward.0": "Module.layer4.Sequential.forward.0",
        "Module.layer4.0.bn1.BatchNorm2d.forward.0": "Module.layer4.0.bn1.BatchNorm2d.forward.0",
        "Module.layer4.0.relu.ReLU.forward.0": "Module.layer4.0.relu.ReLU.forward.0",
        "Module.layer4.0.conv2.Conv2d.forward.0": "Module.layer4.0.conv2.Conv2d.forward.0",
        "Module.layer4.0.bn2.BatchNorm2d.forward.0": "Module.layer4.0.bn2.BatchNorm2d.forward.0",
        "Module.layer4.0.downsample.Sequential.forward.0": "Module.layer4.0.downsample.Sequential.forward.0",
        "Module.layer4.0.downsample.0.Conv2d.forward.0": "Module.layer4.0.downsample.0.Conv2d.forward.0",
        "Module.layer4.0.downsample.1.BatchNorm2d.forward.0": "Module.layer4.0.downsample.1.BatchNorm2d.forward.0",
        "Module.layer4.0.relu.ReLU.forward.1": "Module.layer4.0.relu.ReLU.forward.1",
        "Module.layer4.1.BasicBlock.forward.0": "Module.layer4.1.BasicBlock.forward.0",
        "Module.layer4.1.conv1.Conv2d.forward.0": "Module.layer4.1.conv1.Conv2d.forward.0",
        "Module.layer4.1.bn1.BatchNorm2d.forward.0": "Module.layer4.1.bn1.BatchNorm2d.forward.0",
        "Module.layer4.1.relu.ReLU.forward.0": "Module.layer4.1.relu.ReLU.forward.0",
        "Module.layer4.1.conv2.Conv2d.forward.0": "Module.layer4.1.conv2.Conv2d.forward.0",
        "Module.layer4.1.bn2.BatchNorm2d.forward.0": "Module.layer4.1.bn2.BatchNorm2d.forward.0",
        "Module.layer4.1.relu.ReLU.forward.1": "Module.layer4.1.relu.ReLU.forward.1",
        "Module.avgpool.AdaptiveAvgPool2d.forward.0": "Module.avgpool.AdaptiveAvgPool2d.forward.0",
        "Module.avgpool.AdaptiveAvgPool2d.backward.0": "Module.avgpool.AdaptiveAvgPool2d.backward.0",
        "Module.layer4.1.BasicBlock.backward.0": "Module.layer4.1.BasicBlock.backward.0",
        "Module.layer4.1.relu.ReLU.backward.0": "Module.layer4.1.relu.ReLU.backward.0",
        "Module.layer4.Sequential.backward.0": "Module.layer4.Sequential.backward.0",
        "Module.layer4.1.bn2.BatchNorm2d.backward.0": "Module.layer4.1.bn2.BatchNorm2d.backward.0",
        "Module.layer4.1.conv2.Conv2d.backward.0": "Module.layer4.1.conv2.Conv2d.backward.0",
        "Module.layer4.1.relu.ReLU.backward.1": "Module.layer4.1.relu.ReLU.backward.1",
        "Module.layer4.1.bn1.BatchNorm2d.backward.0": "Module.layer4.1.bn1.BatchNorm2d.backward.0",
        "Module.layer4.1.conv1.Conv2d.backward.0": "Module.layer4.1.conv1.Conv2d.backward.0",
        "Module.layer4.0.BasicBlock.backward.0": "Module.layer4.0.BasicBlock.backward.0",
        "Module.layer4.0.relu.ReLU.backward.0": "Module.layer4.0.relu.ReLU.backward.0",
        "Module.layer4.0.downsample.Sequential.backward.0": "Module.layer4.0.downsample.Sequential.backward.0",
        "Module.layer4.0.downsample.1.BatchNorm2d.backward.0": "Module.layer4.0.downsample.1.BatchNorm2d.backward.0",
        "Module.layer4.0.downsample.0.Conv2d.backward.0": "Module.layer4.0.downsample.0.Conv2d.backward.0",
        "Module.layer4.0.bn2.BatchNorm2d.backward.0": "Module.layer4.0.bn2.BatchNorm2d.backward.0",
        "Module.layer4.0.conv2.Conv2d.backward.0": "Module.layer4.0.conv2.Conv2d.backward.0",
        "Module.layer4.0.relu.ReLU.backward.1": "Module.layer4.0.relu.ReLU.backward.1",
        "Module.layer4.0.bn1.BatchNorm2d.backward.0": "Module.layer4.0.bn1.BatchNorm2d.backward.0",
        "Module.layer4.0.conv1.Conv2d.backward.0": "Module.layer4.0.conv1.Conv2d.backward.0",
        "Module.layer3.1.BasicBlock.backward.0": "Module.layer3.1.BasicBlock.backward.0",
        "Module.layer3.1.relu.ReLU.backward.0": "Module.layer3.1.relu.ReLU.backward.0",
        "Module.layer3.Sequential.backward.0": "Module.layer3.Sequential.backward.0",
        "Module.layer3.1.bn2.BatchNorm2d.backward.0": "Module.layer3.1.bn2.BatchNorm2d.backward.0",
        "Module.layer3.1.conv2.Conv2d.backward.0": "Module.layer3.1.conv2.Conv2d.backward.0",
        "Module.layer3.1.relu.ReLU.backward.1": "Module.layer3.1.relu.ReLU.backward.1",
        "Module.layer3.1.bn1.BatchNorm2d.backward.0": "Module.layer3.1.bn1.BatchNorm2d.backward.0",
        "Module.layer3.1.conv1.Conv2d.backward.0": "Module.layer3.1.conv1.Conv2d.backward.0",
        "Module.layer3.0.BasicBlock.backward.0": "Module.layer3.0.BasicBlock.backward.0",
        "Module.layer3.0.relu.ReLU.backward.0": "Module.layer3.0.relu.ReLU.backward.0",
        "Module.layer3.0.downsample.Sequential.backward.0": "Module.layer3.0.downsample.Sequential.backward.0",
        "Module.layer3.0.downsample.1.BatchNorm2d.backward.0": "Module.layer3.0.downsample.1.BatchNorm2d.backward.0",
        "Module.layer3.0.downsample.0.Conv2d.backward.0": "Module.layer3.0.downsample.0.Conv2d.backward.0",
        "Module.layer3.0.bn2.BatchNorm2d.backward.0": "Module.layer3.0.bn2.BatchNorm2d.backward.0",
        "Module.layer3.0.conv2.Conv2d.backward.0": "Module.layer3.0.conv2.Conv2d.backward.0",
        "Module.layer3.0.relu.ReLU.backward.1": "Module.layer3.0.relu.ReLU.backward.1",
        "Module.layer3.0.bn1.BatchNorm2d.backward.0": "Module.layer3.0.bn1.BatchNorm2d.backward.0",
        "Module.layer3.0.conv1.Conv2d.backward.0": "Module.layer3.0.conv1.Conv2d.backward.0",
        "Module.layer2.1.BasicBlock.backward.0": "Module.layer2.1.BasicBlock.backward.0",
        "Module.layer2.1.relu.ReLU.backward.0": "Module.layer2.1.relu.ReLU.backward.0",
        "Module.layer2.Sequential.backward.0": "Module.layer2.Sequential.backward.0",
        "Module.layer2.1.bn2.BatchNorm2d.backward.0": "Module.layer2.1.bn2.BatchNorm2d.backward.0",
        "Module.layer2.1.conv2.Conv2d.backward.0": "Module.layer2.1.conv2.Conv2d.backward.0",
        "Module.layer2.1.relu.ReLU.backward.1": "Module.layer2.1.relu.ReLU.backward.1",
        "Module.layer2.1.bn1.BatchNorm2d.backward.0": "Module.layer2.1.bn1.BatchNorm2d.backward.0",
        "Module.layer2.1.conv1.Conv2d.backward.0": "Module.layer2.1.conv1.Conv2d.backward.0",
        "Module.layer2.0.BasicBlock.backward.0": "Module.layer2.0.BasicBlock.backward.0",
        "Module.layer2.0.relu.ReLU.backward.0": "Module.layer2.0.relu.ReLU.backward.0",
        "Module.layer2.0.downsample.Sequential.backward.0": "Module.layer2.0.downsample.Sequential.backward.0",
        "Module.layer2.0.downsample.1.BatchNorm2d.backward.0": "Module.layer2.0.downsample.1.BatchNorm2d.backward.0",
        "Module.layer2.0.downsample.0.Conv2d.backward.0": "Module.layer2.0.downsample.0.Conv2d.backward.0",
        "Module.layer2.0.bn2.BatchNorm2d.backward.0": "Module.layer2.0.bn2.BatchNorm2d.backward.0",
        "Module.layer2.0.conv2.Conv2d.backward.0": "Module.layer2.0.conv2.Conv2d.backward.0",
        "Module.layer2.0.relu.ReLU.backward.1": "Module.layer2.0.relu.ReLU.backward.1",
        "Module.layer2.0.bn1.BatchNorm2d.backward.0": "Module.layer2.0.bn1.BatchNorm2d.backward.0",
        "Module.layer2.0.conv1.Conv2d.backward.0": "Module.layer2.0.conv1.Conv2d.backward.0",
        "Module.layer1.1.BasicBlock.backward.0": "Module.layer1.1.BasicBlock.backward.0",
        "Module.layer1.1.relu.ReLU.backward.0": "Module.layer1.1.relu.ReLU.backward.0",
        "Module.layer1.Sequential.backward.0": "Module.layer1.Sequential.backward.0",
        "Module.layer1.1.bn2.BatchNorm2d.backward.0": "Module.layer1.1.bn2.BatchNorm2d.backward.0",
        "Module.layer1.1.conv2.Conv2d.backward.0": "Module.layer1.1.conv2.Conv2d.backward.0",
        "Module.layer1.1.relu.ReLU.backward.1": "Module.layer1.1.relu.ReLU.backward.1",
        "Module.layer1.1.bn1.BatchNorm2d.backward.0": "Module.layer1.1.bn1.BatchNorm2d.backward.0",
        "Module.layer1.1.conv1.Conv2d.backward.0": "Module.layer1.1.conv1.Conv2d.backward.0",
        "Module.layer1.0.BasicBlock.backward.0": "Module.layer1.0.BasicBlock.backward.0",
        "Module.layer1.0.relu.ReLU.backward.0": "Module.layer1.0.relu.ReLU.backward.0",
        "Module.layer1.0.bn2.BatchNorm2d.backward.0": "Module.layer1.0.bn2.BatchNorm2d.backward.0",
        "Module.layer1.0.conv2.Conv2d.backward.0": "Module.layer1.0.conv2.Conv2d.backward.0",
        "Module.layer1.0.relu.ReLU.backward.1": "Module.layer1.0.relu.ReLU.backward.1",
        "Module.layer1.0.bn1.BatchNorm2d.backward.0": "Module.layer1.0.bn1.BatchNorm2d.backward.0",
        "Module.layer1.0.conv1.Conv2d.backward.0": "Module.layer1.0.conv1.Conv2d.backward.0",
        "Module.maxpool.MaxPool2d.backward.0": "Module.maxpool.MaxPool2d.backward.0",
        "Module.relu.ReLU.backward.0": "Module.relu.ReLU.backward.0",
        "Module.bn1.BatchNorm2d.backward.0": "Module.bn1.BatchNorm2d.backward.0",
        "Module.conv1.Conv2d.backward.0": "Module.conv1.Conv2d.backward.0"
    }
}